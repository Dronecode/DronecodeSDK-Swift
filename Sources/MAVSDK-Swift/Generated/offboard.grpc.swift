//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: offboard.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Mavsdk_Rpc_Offboard_OffboardServiceClient, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Offboard_OffboardServiceClientProtocol: GRPCClient {
  func start(
    _ request: Mavsdk_Rpc_Offboard_StartRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_StartRequest, Mavsdk_Rpc_Offboard_StartResponse>

  func stop(
    _ request: Mavsdk_Rpc_Offboard_StopRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_StopRequest, Mavsdk_Rpc_Offboard_StopResponse>

  func isActive(
    _ request: Mavsdk_Rpc_Offboard_IsActiveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_IsActiveRequest, Mavsdk_Rpc_Offboard_IsActiveResponse>

  func setAttitude(
    _ request: Mavsdk_Rpc_Offboard_SetAttitudeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetAttitudeRequest, Mavsdk_Rpc_Offboard_SetAttitudeResponse>

  func setActuatorControl(
    _ request: Mavsdk_Rpc_Offboard_SetActuatorControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetActuatorControlRequest, Mavsdk_Rpc_Offboard_SetActuatorControlResponse>

  func setAttitudeRate(
    _ request: Mavsdk_Rpc_Offboard_SetAttitudeRateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetAttitudeRateRequest, Mavsdk_Rpc_Offboard_SetAttitudeRateResponse>

  func setPositionNed(
    _ request: Mavsdk_Rpc_Offboard_SetPositionNedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetPositionNedRequest, Mavsdk_Rpc_Offboard_SetPositionNedResponse>

  func setVelocityBody(
    _ request: Mavsdk_Rpc_Offboard_SetVelocityBodyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetVelocityBodyRequest, Mavsdk_Rpc_Offboard_SetVelocityBodyResponse>

  func setVelocityNed(
    _ request: Mavsdk_Rpc_Offboard_SetVelocityNedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetVelocityNedRequest, Mavsdk_Rpc_Offboard_SetVelocityNedResponse>

  func setPositionVelocityNed(
    _ request: Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest, Mavsdk_Rpc_Offboard_SetPositionVelocityNedResponse>

}

extension Mavsdk_Rpc_Offboard_OffboardServiceClientProtocol {

  ///
  /// Start offboard control.
  ///
  /// - Parameters:
  ///   - request: Request to send to Start.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func start(
    _ request: Mavsdk_Rpc_Offboard_StartRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_StartRequest, Mavsdk_Rpc_Offboard_StartResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/Start",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Stop offboard control.
  ///
  /// The vehicle will be put into Hold mode: https://docs.px4.io/en/flight_modes/hold.html
  ///
  /// - Parameters:
  ///   - request: Request to send to Stop.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stop(
    _ request: Mavsdk_Rpc_Offboard_StopRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_StopRequest, Mavsdk_Rpc_Offboard_StopResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/Stop",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Check if offboard control is active.
  ///
  /// True means that the vehicle is in offboard mode and we are actively sending
  /// setpoints.
  ///
  /// - Parameters:
  ///   - request: Request to send to IsActive.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isActive(
    _ request: Mavsdk_Rpc_Offboard_IsActiveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_IsActiveRequest, Mavsdk_Rpc_Offboard_IsActiveResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/IsActive",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Set the attitude in terms of roll, pitch and yaw in degrees with thrust.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAttitude.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAttitude(
    _ request: Mavsdk_Rpc_Offboard_SetAttitudeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetAttitudeRequest, Mavsdk_Rpc_Offboard_SetAttitudeResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetAttitude",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Set direct actuator control values to groups #0 and #1.
  ///
  /// First 8 controls will go to control group 0, the following 8 controls to control group 1 (if
  /// actuator_control.num_controls more than 8).
  ///
  /// - Parameters:
  ///   - request: Request to send to SetActuatorControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setActuatorControl(
    _ request: Mavsdk_Rpc_Offboard_SetActuatorControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetActuatorControlRequest, Mavsdk_Rpc_Offboard_SetActuatorControlResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetActuatorControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Set the attitude rate in terms of pitch, roll and yaw angular rate along with thrust.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAttitudeRate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAttitudeRate(
    _ request: Mavsdk_Rpc_Offboard_SetAttitudeRateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetAttitudeRateRequest, Mavsdk_Rpc_Offboard_SetAttitudeRateResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetAttitudeRate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Set the position in NED coordinates and yaw.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPositionNed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setPositionNed(
    _ request: Mavsdk_Rpc_Offboard_SetPositionNedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetPositionNedRequest, Mavsdk_Rpc_Offboard_SetPositionNedResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetPositionNed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Set the velocity in body coordinates and yaw angular rate. Not available for fixed-wing aircraft.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetVelocityBody.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setVelocityBody(
    _ request: Mavsdk_Rpc_Offboard_SetVelocityBodyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetVelocityBodyRequest, Mavsdk_Rpc_Offboard_SetVelocityBodyResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetVelocityBody",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Set the velocity in NED coordinates and yaw. Not available for fixed-wing aircraft.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetVelocityNed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setVelocityNed(
    _ request: Mavsdk_Rpc_Offboard_SetVelocityNedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetVelocityNedRequest, Mavsdk_Rpc_Offboard_SetVelocityNedResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetVelocityNed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Set the position in NED coordinates, with the velocity to be used as feed-forward.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPositionVelocityNed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setPositionVelocityNed(
    _ request: Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest, Mavsdk_Rpc_Offboard_SetPositionVelocityNedResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.offboard.OffboardService/SetPositionVelocityNed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Mavsdk_Rpc_Offboard_OffboardServiceClient: Mavsdk_Rpc_Offboard_OffboardServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the mavsdk.rpc.offboard.OffboardService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_Offboard_OffboardServiceProvider: CallHandlerProvider {
  ///
  /// Start offboard control.
  func start(request: Mavsdk_Rpc_Offboard_StartRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_StartResponse>
  ///
  /// Stop offboard control.
  ///
  /// The vehicle will be put into Hold mode: https://docs.px4.io/en/flight_modes/hold.html
  func stop(request: Mavsdk_Rpc_Offboard_StopRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_StopResponse>
  ///
  /// Check if offboard control is active.
  ///
  /// True means that the vehicle is in offboard mode and we are actively sending
  /// setpoints.
  func isActive(request: Mavsdk_Rpc_Offboard_IsActiveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_IsActiveResponse>
  ///
  /// Set the attitude in terms of roll, pitch and yaw in degrees with thrust.
  func setAttitude(request: Mavsdk_Rpc_Offboard_SetAttitudeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetAttitudeResponse>
  ///
  /// Set direct actuator control values to groups #0 and #1.
  ///
  /// First 8 controls will go to control group 0, the following 8 controls to control group 1 (if
  /// actuator_control.num_controls more than 8).
  func setActuatorControl(request: Mavsdk_Rpc_Offboard_SetActuatorControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetActuatorControlResponse>
  ///
  /// Set the attitude rate in terms of pitch, roll and yaw angular rate along with thrust.
  func setAttitudeRate(request: Mavsdk_Rpc_Offboard_SetAttitudeRateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetAttitudeRateResponse>
  ///
  /// Set the position in NED coordinates and yaw.
  func setPositionNed(request: Mavsdk_Rpc_Offboard_SetPositionNedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetPositionNedResponse>
  ///
  /// Set the velocity in body coordinates and yaw angular rate. Not available for fixed-wing aircraft.
  func setVelocityBody(request: Mavsdk_Rpc_Offboard_SetVelocityBodyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetVelocityBodyResponse>
  ///
  /// Set the velocity in NED coordinates and yaw. Not available for fixed-wing aircraft.
  func setVelocityNed(request: Mavsdk_Rpc_Offboard_SetVelocityNedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetVelocityNedResponse>
  ///
  /// Set the position in NED coordinates, with the velocity to be used as feed-forward.
  func setPositionVelocityNed(request: Mavsdk_Rpc_Offboard_SetPositionVelocityNedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Offboard_SetPositionVelocityNedResponse>
}

extension Mavsdk_Rpc_Offboard_OffboardServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.offboard.OffboardService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Start":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.start(request: request, context: context)
        }
      }

    case "Stop":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.stop(request: request, context: context)
        }
      }

    case "IsActive":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.isActive(request: request, context: context)
        }
      }

    case "SetAttitude":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setAttitude(request: request, context: context)
        }
      }

    case "SetActuatorControl":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setActuatorControl(request: request, context: context)
        }
      }

    case "SetAttitudeRate":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setAttitudeRate(request: request, context: context)
        }
      }

    case "SetPositionNed":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setPositionNed(request: request, context: context)
        }
      }

    case "SetVelocityBody":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setVelocityBody(request: request, context: context)
        }
      }

    case "SetVelocityNed":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setVelocityNed(request: request, context: context)
        }
      }

    case "SetPositionVelocityNed":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setPositionVelocityNed(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

