import Foundation
import RxSwift
import SwiftGRPC

public class {{ plugin_name.upper_camel_case }} {
    private let service: {{ package.upper_camel_case.replace('_', '').replace('.', '_') }}_{{ plugin_name.upper_camel_case }}ServiceService
    private let scheduler: SchedulerType

    public convenience init(address: String = "localhost",
                            port: Int32 = 50051,
                            scheduler: SchedulerType = ConcurrentDispatchQueueScheduler(qos: .background)) {
        let service = {{ package.upper_camel_case.replace('_', '').replace('.', '_') }}_{{ plugin_name.upper_camel_case }}ServiceServiceClient(address: "\(address):\(port)", secure: false)

        self.init(service: service, scheduler: scheduler)
    }

    init(service: {{ package.upper_camel_case.replace('_', '').replace('.', '_') }}_{{ plugin_name.upper_camel_case }}ServiceService, scheduler: SchedulerType) {
        self.service = service
        self.scheduler = scheduler
    }

    struct Runtime{{ plugin_name.upper_camel_case }}Error: Error {
        let description: String

        init(_ description: String) {
            self.description = description
        }
    }

    {% if has_result %}
    struct {{ plugin_name.upper_camel_case }}Error: Error {
        let code: {{ plugin_name.upper_camel_case }}.{{ plugin_name.upper_camel_case }}Result.Result
        let description: String
    }
    {% endif %}

{%- for enum in enums %}
{{ indent(enum, 1) }}
{%- endfor %}

{% for struct in structs %}
{{ indent(struct, 1) }}
{% endfor %}

{%- for method in methods %}
{{ indent(method, 1) }}
{%- endfor %}
}
