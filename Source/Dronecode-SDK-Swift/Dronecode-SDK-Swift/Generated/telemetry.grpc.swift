//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: telemetry/telemetry.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_PositionResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_PositionResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_PositionResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribePositionRequest, DronecodeSdk_Rpc_Telemetry_PositionResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribePosition" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_PositionResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribePosition" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_HomeResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_HomeResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_HomeResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeHomeRequest, DronecodeSdk_Rpc_Telemetry_HomeResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeHome" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_HomeResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeHome" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_InAirResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_InAirResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_InAirResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeInAirRequest, DronecodeSdk_Rpc_Telemetry_InAirResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeInAir" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_InAirResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeInAir" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_ArmedResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_ArmedResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_ArmedResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeArmedRequest, DronecodeSdk_Rpc_Telemetry_ArmedResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeArmed" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_ArmedResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeArmed" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_AttitudeQuaternionResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_AttitudeQuaternionResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_AttitudeQuaternionResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, DronecodeSdk_Rpc_Telemetry_AttitudeQuaternionResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_AttitudeQuaternionResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_AttitudeEulerResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_AttitudeEulerResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_AttitudeEulerResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, DronecodeSdk_Rpc_Telemetry_AttitudeEulerResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_AttitudeEulerResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, DronecodeSdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_CameraAttitudeEulerResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_CameraAttitudeEulerResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_CameraAttitudeEulerResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, DronecodeSdk_Rpc_Telemetry_CameraAttitudeEulerResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_CameraAttitudeEulerResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_GroundSpeedNEDResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_GroundSpeedNEDResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_GroundSpeedNEDResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest, DronecodeSdk_Rpc_Telemetry_GroundSpeedNEDResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeGroundSpeedNED" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_GroundSpeedNEDResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeGroundSpeedNED" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_GPSInfoResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_GPSInfoResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_GPSInfoResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeGPSInfoRequest, DronecodeSdk_Rpc_Telemetry_GPSInfoResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeGPSInfo" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_GPSInfoResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeGPSInfo" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_BatteryResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_BatteryResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_BatteryResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeBatteryRequest, DronecodeSdk_Rpc_Telemetry_BatteryResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeBattery" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_BatteryResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeBattery" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_FlightModeResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_FlightModeResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_FlightModeResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeFlightModeRequest, DronecodeSdk_Rpc_Telemetry_FlightModeResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeFlightMode" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_FlightModeResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeFlightMode" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_HealthResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_HealthResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_HealthResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeHealthRequest, DronecodeSdk_Rpc_Telemetry_HealthResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeHealth" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_HealthResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeHealth" }
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Telemetry_RCStatusResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Telemetry_RCStatusResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Telemetry_RCStatusResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeRCStatusRequest, DronecodeSdk_Rpc_Telemetry_RCStatusResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeRCStatus" }
}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_RCStatusResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall {
  override class var method: String { return "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeRCStatus" }
}


/// Instantiate DronecodeSdk_Rpc_Telemetry_TelemetryServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceService: ServiceClient {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribePosition(_ request: DronecodeSdk_Rpc_Telemetry_SubscribePositionRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeHome(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeHomeRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeInAir(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeInAirRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeArmed(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeArmedRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeAttitudeQuaternion(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeAttitudeEuler(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeCameraAttitudeQuaternion(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeCameraAttitudeEuler(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeGroundSpeedNED(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeGPSInfo(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeGPSInfoRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeBattery(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeBatteryRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeFlightMode(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeFlightModeRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeHealth(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeHealthRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeRCStatus(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeRCStatusRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall

}

internal final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceServiceClient: ServiceClientBase, DronecodeSdk_Rpc_Telemetry_TelemetryServiceService {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribePosition(_ request: DronecodeSdk_Rpc_Telemetry_SubscribePositionRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeHome(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeHomeRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeInAir(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeInAirRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeArmed(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeArmedRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeAttitudeQuaternion(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeAttitudeEuler(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeCameraAttitudeQuaternion(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeCameraAttitudeEuler(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeGroundSpeedNED(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeGPSInfo(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeGPSInfoRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeBattery(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeBatteryRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeFlightMode(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeFlightModeRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeHealth(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeHealthRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeRCStatus(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeRCStatusRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall {
    return try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceServiceTestStub: ServiceClientTestStubBase, DronecodeSdk_Rpc_Telemetry_TelemetryServiceService {
  var subscribePositionRequests: [DronecodeSdk_Rpc_Telemetry_SubscribePositionRequest] = []
  var subscribePositionCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall] = []
  func subscribePosition(_ request: DronecodeSdk_Rpc_Telemetry_SubscribePositionRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
    subscribePositionRequests.append(request)
    defer { subscribePositionCalls.removeFirst() }
    return subscribePositionCalls.first!
  }

  var subscribeHomeRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeHomeRequest] = []
  var subscribeHomeCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall] = []
  func subscribeHome(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeHomeRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
    subscribeHomeRequests.append(request)
    defer { subscribeHomeCalls.removeFirst() }
    return subscribeHomeCalls.first!
  }

  var subscribeInAirRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeInAirRequest] = []
  var subscribeInAirCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall] = []
  func subscribeInAir(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeInAirRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
    subscribeInAirRequests.append(request)
    defer { subscribeInAirCalls.removeFirst() }
    return subscribeInAirCalls.first!
  }

  var subscribeArmedRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeArmedRequest] = []
  var subscribeArmedCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall] = []
  func subscribeArmed(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeArmedRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
    subscribeArmedRequests.append(request)
    defer { subscribeArmedCalls.removeFirst() }
    return subscribeArmedCalls.first!
  }

  var subscribeAttitudeQuaternionRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest] = []
  var subscribeAttitudeQuaternionCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall] = []
  func subscribeAttitudeQuaternion(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
    subscribeAttitudeQuaternionRequests.append(request)
    defer { subscribeAttitudeQuaternionCalls.removeFirst() }
    return subscribeAttitudeQuaternionCalls.first!
  }

  var subscribeAttitudeEulerRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest] = []
  var subscribeAttitudeEulerCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall] = []
  func subscribeAttitudeEuler(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
    subscribeAttitudeEulerRequests.append(request)
    defer { subscribeAttitudeEulerCalls.removeFirst() }
    return subscribeAttitudeEulerCalls.first!
  }

  var subscribeCameraAttitudeQuaternionRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest] = []
  var subscribeCameraAttitudeQuaternionCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall] = []
  func subscribeCameraAttitudeQuaternion(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
    subscribeCameraAttitudeQuaternionRequests.append(request)
    defer { subscribeCameraAttitudeQuaternionCalls.removeFirst() }
    return subscribeCameraAttitudeQuaternionCalls.first!
  }

  var subscribeCameraAttitudeEulerRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest] = []
  var subscribeCameraAttitudeEulerCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall] = []
  func subscribeCameraAttitudeEuler(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
    subscribeCameraAttitudeEulerRequests.append(request)
    defer { subscribeCameraAttitudeEulerCalls.removeFirst() }
    return subscribeCameraAttitudeEulerCalls.first!
  }

  var subscribeGroundSpeedNEDRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest] = []
  var subscribeGroundSpeedNEDCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall] = []
  func subscribeGroundSpeedNED(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDCall {
    subscribeGroundSpeedNEDRequests.append(request)
    defer { subscribeGroundSpeedNEDCalls.removeFirst() }
    return subscribeGroundSpeedNEDCalls.first!
  }

  var subscribeGPSInfoRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeGPSInfoRequest] = []
  var subscribeGPSInfoCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall] = []
  func subscribeGPSInfo(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeGPSInfoRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoCall {
    subscribeGPSInfoRequests.append(request)
    defer { subscribeGPSInfoCalls.removeFirst() }
    return subscribeGPSInfoCalls.first!
  }

  var subscribeBatteryRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeBatteryRequest] = []
  var subscribeBatteryCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall] = []
  func subscribeBattery(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeBatteryRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
    subscribeBatteryRequests.append(request)
    defer { subscribeBatteryCalls.removeFirst() }
    return subscribeBatteryCalls.first!
  }

  var subscribeFlightModeRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeFlightModeRequest] = []
  var subscribeFlightModeCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall] = []
  func subscribeFlightMode(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeFlightModeRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
    subscribeFlightModeRequests.append(request)
    defer { subscribeFlightModeCalls.removeFirst() }
    return subscribeFlightModeCalls.first!
  }

  var subscribeHealthRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeHealthRequest] = []
  var subscribeHealthCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall] = []
  func subscribeHealth(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeHealthRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
    subscribeHealthRequests.append(request)
    defer { subscribeHealthCalls.removeFirst() }
    return subscribeHealthCalls.first!
  }

  var subscribeRCStatusRequests: [DronecodeSdk_Rpc_Telemetry_SubscribeRCStatusRequest] = []
  var subscribeRCStatusCalls: [DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall] = []
  func subscribeRCStatus(_ request: DronecodeSdk_Rpc_Telemetry_SubscribeRCStatusRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusCall {
    subscribeRCStatusRequests.append(request)
    defer { subscribeRCStatusCalls.removeFirst() }
    return subscribeRCStatusCalls.first!
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceProvider {
  func subscribePosition(request: DronecodeSdk_Rpc_Telemetry_SubscribePositionRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSession) throws
  func subscribeHome(request: DronecodeSdk_Rpc_Telemetry_SubscribeHomeRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession) throws
  func subscribeInAir(request: DronecodeSdk_Rpc_Telemetry_SubscribeInAirRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession) throws
  func subscribeArmed(request: DronecodeSdk_Rpc_Telemetry_SubscribeArmedRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession) throws
  func subscribeAttitudeQuaternion(request: DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession) throws
  func subscribeAttitudeEuler(request: DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession) throws
  func subscribeCameraAttitudeQuaternion(request: DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession) throws
  func subscribeCameraAttitudeEuler(request: DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession) throws
  func subscribeGroundSpeedNED(request: DronecodeSdk_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSession) throws
  func subscribeGPSInfo(request: DronecodeSdk_Rpc_Telemetry_SubscribeGPSInfoRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSession) throws
  func subscribeBattery(request: DronecodeSdk_Rpc_Telemetry_SubscribeBatteryRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession) throws
  func subscribeFlightMode(request: DronecodeSdk_Rpc_Telemetry_SubscribeFlightModeRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession) throws
  func subscribeHealth(request: DronecodeSdk_Rpc_Telemetry_SubscribeHealthRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession) throws
  func subscribeRCStatus(request: DronecodeSdk_Rpc_Telemetry_SubscribeRCStatusRequest, session: DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSession) throws
}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_PositionResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_PositionResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_PositionResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribePositionRequest, DronecodeSdk_Rpc_Telemetry_PositionResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_PositionResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_HomeResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_HomeResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_HomeResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeHomeRequest, DronecodeSdk_Rpc_Telemetry_HomeResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_HomeResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_InAirResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_InAirResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_InAirResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeInAirRequest, DronecodeSdk_Rpc_Telemetry_InAirResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_InAirResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_ArmedResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_ArmedResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_ArmedResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeArmedRequest, DronecodeSdk_Rpc_Telemetry_ArmedResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_ArmedResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_AttitudeQuaternionResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_AttitudeQuaternionResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_AttitudeQuaternionResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, DronecodeSdk_Rpc_Telemetry_AttitudeQuaternionResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_AttitudeQuaternionResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_AttitudeEulerResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_AttitudeEulerResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_AttitudeEulerResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, DronecodeSdk_Rpc_Telemetry_AttitudeEulerResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_AttitudeEulerResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, DronecodeSdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_CameraAttitudeEulerResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_CameraAttitudeEulerResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_CameraAttitudeEulerResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, DronecodeSdk_Rpc_Telemetry_CameraAttitudeEulerResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_CameraAttitudeEulerResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_GroundSpeedNEDResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_GroundSpeedNEDResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_GroundSpeedNEDResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeGroundSpeedNEDRequest, DronecodeSdk_Rpc_Telemetry_GroundSpeedNEDResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_GroundSpeedNEDResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_GPSInfoResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_GPSInfoResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_GPSInfoResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeGPSInfoRequest, DronecodeSdk_Rpc_Telemetry_GPSInfoResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_GPSInfoResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_BatteryResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_BatteryResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_BatteryResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeBatteryRequest, DronecodeSdk_Rpc_Telemetry_BatteryResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_BatteryResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_FlightModeResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_FlightModeResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_FlightModeResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeFlightModeRequest, DronecodeSdk_Rpc_Telemetry_FlightModeResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_FlightModeResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_HealthResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_HealthResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_HealthResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeHealthRequest, DronecodeSdk_Rpc_Telemetry_HealthResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_HealthResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession {}

internal protocol DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_RCStatusResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Telemetry_RCStatusResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Telemetry_RCStatusResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Telemetry_SubscribeRCStatusRequest, DronecodeSdk_Rpc_Telemetry_RCStatusResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSession {}

class DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Telemetry_RCStatusResponse>, DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSession {}


/// Main server for generated service
internal final class DronecodeSdk_Rpc_Telemetry_TelemetryServiceServer: ServiceServer {
  private let provider: DronecodeSdk_Rpc_Telemetry_TelemetryServiceProvider

  internal init(address: String, provider: DronecodeSdk_Rpc_Telemetry_TelemetryServiceProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: DronecodeSdk_Rpc_Telemetry_TelemetryServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: DronecodeSdk_Rpc_Telemetry_TelemetryServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Start the server.
  internal override func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribePosition":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribePosition(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeHome":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeHome(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeInAir":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeInAir(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeArmed":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeArmed(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeAttitudeQuaternion(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeAttitudeEuler(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeCameraAttitudeQuaternion(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeCameraAttitudeEuler(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeGroundSpeedNED":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeGroundSpeedNED(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNEDSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeGPSInfo":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeGPSInfo(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeGPSInfoSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeBattery":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeBattery(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeFlightMode":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeFlightMode(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeHealth":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeHealth(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.telemetry.TelemetryService/SubscribeRCStatus":
      try DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeRCStatus(request: $0, session: $1 as! DronecodeSdk_Rpc_Telemetry_TelemetryServiceSubscribeRCStatusSessionBase) })
          .run(queue: queue)
      return true
    default:
      return false
    }
  }
}

