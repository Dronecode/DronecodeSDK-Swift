//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: camera/camera.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Camera_TakePhotoRequest, DronecodeSdk_Rpc_Camera_TakePhotoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/TakePhoto" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest, DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse>, DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/StartPhotoInterval" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest, DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse>, DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/StopPhotoInterval" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceStartVideoCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceStartVideoCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Camera_StartVideoRequest, DronecodeSdk_Rpc_Camera_StartVideoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceStartVideoCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/StartVideo" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceStopVideoCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceStopVideoCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Camera_StopVideoRequest, DronecodeSdk_Rpc_Camera_StopVideoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceStopVideoCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/StopVideo" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest, DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse>, DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/StartVideoStreaming" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest, DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse>, DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/StopVideoStreaming" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSetModeCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSetModeCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Camera_SetModeRequest, DronecodeSdk_Rpc_Camera_SetModeResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSetModeCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SetMode" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Camera_ModeResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Camera_ModeResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Camera_ModeResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Camera_SubscribeModeRequest, DronecodeSdk_Rpc_Camera_ModeResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SubscribeMode" }
}

class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Camera_ModeResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SubscribeMode" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest, DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SetVideoStreamSettings" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Camera_SubscribeVideoStreamInfoRequest, DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SubscribeVideoStreamInfo" }
}

class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SubscribeVideoStreamInfo" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Camera_CaptureInfoResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Camera_CaptureInfoResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Camera_CaptureInfoResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Camera_SubscribeCaptureInfoRequest, DronecodeSdk_Rpc_Camera_CaptureInfoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SubscribeCaptureInfo" }
}

class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Camera_CaptureInfoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SubscribeCaptureInfo" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Camera_CameraStatusResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Camera_CameraStatusResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Camera_CameraStatusResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Camera_SubscribeCameraStatusRequest, DronecodeSdk_Rpc_Camera_CameraStatusResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SubscribeCameraStatus" }
}

class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Camera_CameraStatusResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SubscribeCameraStatus" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Camera_CurrentSettingsResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Camera_CurrentSettingsResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Camera_CurrentSettingsResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Camera_SubscribeCurrentSettingsRequest, DronecodeSdk_Rpc_Camera_CurrentSettingsResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SubscribeCurrentSettings" }
}

class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Camera_CurrentSettingsResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SubscribeCurrentSettings" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest, DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SubscribePossibleSettingOptions" }
}

class DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SubscribePossibleSettingOptions" }
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSetSettingCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSetSettingCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Camera_SetSettingRequest, DronecodeSdk_Rpc_Camera_SetSettingResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSetSettingCall {
  override class var method: String { return "/dronecode_sdk.rpc.camera.CameraService/SetSetting" }
}


/// Instantiate DronecodeSdk_Rpc_Camera_CameraServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol DronecodeSdk_Rpc_Camera_CameraServiceService: ServiceClient {
  /// Synchronous. Unary.
  func takePhoto(_ request: DronecodeSdk_Rpc_Camera_TakePhotoRequest) throws -> DronecodeSdk_Rpc_Camera_TakePhotoResponse
  /// Asynchronous. Unary.
  func takePhoto(_ request: DronecodeSdk_Rpc_Camera_TakePhotoRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_TakePhotoResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoCall

  /// Synchronous. Unary.
  func startPhotoInterval(_ request: DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest) throws -> DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse
  /// Asynchronous. Unary.
  func startPhotoInterval(_ request: DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalCall

  /// Synchronous. Unary.
  func stopPhotoInterval(_ request: DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest) throws -> DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse
  /// Asynchronous. Unary.
  func stopPhotoInterval(_ request: DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalCall

  /// Synchronous. Unary.
  func startVideo(_ request: DronecodeSdk_Rpc_Camera_StartVideoRequest) throws -> DronecodeSdk_Rpc_Camera_StartVideoResponse
  /// Asynchronous. Unary.
  func startVideo(_ request: DronecodeSdk_Rpc_Camera_StartVideoRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StartVideoResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStartVideoCall

  /// Synchronous. Unary.
  func stopVideo(_ request: DronecodeSdk_Rpc_Camera_StopVideoRequest) throws -> DronecodeSdk_Rpc_Camera_StopVideoResponse
  /// Asynchronous. Unary.
  func stopVideo(_ request: DronecodeSdk_Rpc_Camera_StopVideoRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StopVideoResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStopVideoCall

  /// Synchronous. Unary.
  func startVideoStreaming(_ request: DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest) throws -> DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse
  /// Asynchronous. Unary.
  func startVideoStreaming(_ request: DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingCall

  /// Synchronous. Unary.
  func stopVideoStreaming(_ request: DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest) throws -> DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse
  /// Asynchronous. Unary.
  func stopVideoStreaming(_ request: DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingCall

  /// Synchronous. Unary.
  func setMode(_ request: DronecodeSdk_Rpc_Camera_SetModeRequest) throws -> DronecodeSdk_Rpc_Camera_SetModeResponse
  /// Asynchronous. Unary.
  func setMode(_ request: DronecodeSdk_Rpc_Camera_SetModeRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_SetModeResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSetModeCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeMode(_ request: DronecodeSdk_Rpc_Camera_SubscribeModeRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeCall

  /// Synchronous. Unary.
  func setVideoStreamSettings(_ request: DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest) throws -> DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse
  /// Asynchronous. Unary.
  func setVideoStreamSettings(_ request: DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeVideoStreamInfo(_ request: DronecodeSdk_Rpc_Camera_SubscribeVideoStreamInfoRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeCaptureInfo(_ request: DronecodeSdk_Rpc_Camera_SubscribeCaptureInfoRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeCameraStatus(_ request: DronecodeSdk_Rpc_Camera_SubscribeCameraStatusRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeCurrentSettings(_ request: DronecodeSdk_Rpc_Camera_SubscribeCurrentSettingsRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribePossibleSettingOptions(_ request: DronecodeSdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsCall

  /// Synchronous. Unary.
  func setSetting(_ request: DronecodeSdk_Rpc_Camera_SetSettingRequest) throws -> DronecodeSdk_Rpc_Camera_SetSettingResponse
  /// Asynchronous. Unary.
  func setSetting(_ request: DronecodeSdk_Rpc_Camera_SetSettingRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_SetSettingResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSetSettingCall

}

internal final class DronecodeSdk_Rpc_Camera_CameraServiceServiceClient: ServiceClientBase, DronecodeSdk_Rpc_Camera_CameraServiceService {
  /// Synchronous. Unary.
  internal func takePhoto(_ request: DronecodeSdk_Rpc_Camera_TakePhotoRequest) throws -> DronecodeSdk_Rpc_Camera_TakePhotoResponse {
    return try DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func takePhoto(_ request: DronecodeSdk_Rpc_Camera_TakePhotoRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_TakePhotoResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func startPhotoInterval(_ request: DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest) throws -> DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse {
    return try DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func startPhotoInterval(_ request: DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func stopPhotoInterval(_ request: DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest) throws -> DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse {
    return try DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func stopPhotoInterval(_ request: DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func startVideo(_ request: DronecodeSdk_Rpc_Camera_StartVideoRequest) throws -> DronecodeSdk_Rpc_Camera_StartVideoResponse {
    return try DronecodeSdk_Rpc_Camera_CameraServiceStartVideoCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func startVideo(_ request: DronecodeSdk_Rpc_Camera_StartVideoRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StartVideoResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStartVideoCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceStartVideoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func stopVideo(_ request: DronecodeSdk_Rpc_Camera_StopVideoRequest) throws -> DronecodeSdk_Rpc_Camera_StopVideoResponse {
    return try DronecodeSdk_Rpc_Camera_CameraServiceStopVideoCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func stopVideo(_ request: DronecodeSdk_Rpc_Camera_StopVideoRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StopVideoResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStopVideoCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceStopVideoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func startVideoStreaming(_ request: DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest) throws -> DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse {
    return try DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func startVideoStreaming(_ request: DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func stopVideoStreaming(_ request: DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest) throws -> DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse {
    return try DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func stopVideoStreaming(_ request: DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setMode(_ request: DronecodeSdk_Rpc_Camera_SetModeRequest) throws -> DronecodeSdk_Rpc_Camera_SetModeResponse {
    return try DronecodeSdk_Rpc_Camera_CameraServiceSetModeCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func setMode(_ request: DronecodeSdk_Rpc_Camera_SetModeRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_SetModeResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSetModeCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceSetModeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeMode(_ request: DronecodeSdk_Rpc_Camera_SubscribeModeRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setVideoStreamSettings(_ request: DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest) throws -> DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse {
    return try DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func setVideoStreamSettings(_ request: DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeVideoStreamInfo(_ request: DronecodeSdk_Rpc_Camera_SubscribeVideoStreamInfoRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeCaptureInfo(_ request: DronecodeSdk_Rpc_Camera_SubscribeCaptureInfoRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeCameraStatus(_ request: DronecodeSdk_Rpc_Camera_SubscribeCameraStatusRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeCurrentSettings(_ request: DronecodeSdk_Rpc_Camera_SubscribeCurrentSettingsRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribePossibleSettingOptions(_ request: DronecodeSdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setSetting(_ request: DronecodeSdk_Rpc_Camera_SetSettingRequest) throws -> DronecodeSdk_Rpc_Camera_SetSettingResponse {
    return try DronecodeSdk_Rpc_Camera_CameraServiceSetSettingCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func setSetting(_ request: DronecodeSdk_Rpc_Camera_SetSettingRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_SetSettingResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSetSettingCall {
    return try DronecodeSdk_Rpc_Camera_CameraServiceSetSettingCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

class DronecodeSdk_Rpc_Camera_CameraServiceServiceTestStub: ServiceClientTestStubBase, DronecodeSdk_Rpc_Camera_CameraServiceService {
  var takePhotoRequests: [DronecodeSdk_Rpc_Camera_TakePhotoRequest] = []
  var takePhotoResponses: [DronecodeSdk_Rpc_Camera_TakePhotoResponse] = []
  func takePhoto(_ request: DronecodeSdk_Rpc_Camera_TakePhotoRequest) throws -> DronecodeSdk_Rpc_Camera_TakePhotoResponse {
    takePhotoRequests.append(request)
    defer { takePhotoResponses.removeFirst() }
    return takePhotoResponses.first!
  }
  func takePhoto(_ request: DronecodeSdk_Rpc_Camera_TakePhotoRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_TakePhotoResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoCall {
    fatalError("not implemented")
  }

  var startPhotoIntervalRequests: [DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest] = []
  var startPhotoIntervalResponses: [DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse] = []
  func startPhotoInterval(_ request: DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest) throws -> DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse {
    startPhotoIntervalRequests.append(request)
    defer { startPhotoIntervalResponses.removeFirst() }
    return startPhotoIntervalResponses.first!
  }
  func startPhotoInterval(_ request: DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalCall {
    fatalError("not implemented")
  }

  var stopPhotoIntervalRequests: [DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest] = []
  var stopPhotoIntervalResponses: [DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse] = []
  func stopPhotoInterval(_ request: DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest) throws -> DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse {
    stopPhotoIntervalRequests.append(request)
    defer { stopPhotoIntervalResponses.removeFirst() }
    return stopPhotoIntervalResponses.first!
  }
  func stopPhotoInterval(_ request: DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalCall {
    fatalError("not implemented")
  }

  var startVideoRequests: [DronecodeSdk_Rpc_Camera_StartVideoRequest] = []
  var startVideoResponses: [DronecodeSdk_Rpc_Camera_StartVideoResponse] = []
  func startVideo(_ request: DronecodeSdk_Rpc_Camera_StartVideoRequest) throws -> DronecodeSdk_Rpc_Camera_StartVideoResponse {
    startVideoRequests.append(request)
    defer { startVideoResponses.removeFirst() }
    return startVideoResponses.first!
  }
  func startVideo(_ request: DronecodeSdk_Rpc_Camera_StartVideoRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StartVideoResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStartVideoCall {
    fatalError("not implemented")
  }

  var stopVideoRequests: [DronecodeSdk_Rpc_Camera_StopVideoRequest] = []
  var stopVideoResponses: [DronecodeSdk_Rpc_Camera_StopVideoResponse] = []
  func stopVideo(_ request: DronecodeSdk_Rpc_Camera_StopVideoRequest) throws -> DronecodeSdk_Rpc_Camera_StopVideoResponse {
    stopVideoRequests.append(request)
    defer { stopVideoResponses.removeFirst() }
    return stopVideoResponses.first!
  }
  func stopVideo(_ request: DronecodeSdk_Rpc_Camera_StopVideoRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StopVideoResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStopVideoCall {
    fatalError("not implemented")
  }

  var startVideoStreamingRequests: [DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest] = []
  var startVideoStreamingResponses: [DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse] = []
  func startVideoStreaming(_ request: DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest) throws -> DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse {
    startVideoStreamingRequests.append(request)
    defer { startVideoStreamingResponses.removeFirst() }
    return startVideoStreamingResponses.first!
  }
  func startVideoStreaming(_ request: DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingCall {
    fatalError("not implemented")
  }

  var stopVideoStreamingRequests: [DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest] = []
  var stopVideoStreamingResponses: [DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse] = []
  func stopVideoStreaming(_ request: DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest) throws -> DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse {
    stopVideoStreamingRequests.append(request)
    defer { stopVideoStreamingResponses.removeFirst() }
    return stopVideoStreamingResponses.first!
  }
  func stopVideoStreaming(_ request: DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingCall {
    fatalError("not implemented")
  }

  var setModeRequests: [DronecodeSdk_Rpc_Camera_SetModeRequest] = []
  var setModeResponses: [DronecodeSdk_Rpc_Camera_SetModeResponse] = []
  func setMode(_ request: DronecodeSdk_Rpc_Camera_SetModeRequest) throws -> DronecodeSdk_Rpc_Camera_SetModeResponse {
    setModeRequests.append(request)
    defer { setModeResponses.removeFirst() }
    return setModeResponses.first!
  }
  func setMode(_ request: DronecodeSdk_Rpc_Camera_SetModeRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_SetModeResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSetModeCall {
    fatalError("not implemented")
  }

  var subscribeModeRequests: [DronecodeSdk_Rpc_Camera_SubscribeModeRequest] = []
  var subscribeModeCalls: [DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeCall] = []
  func subscribeMode(_ request: DronecodeSdk_Rpc_Camera_SubscribeModeRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeCall {
    subscribeModeRequests.append(request)
    defer { subscribeModeCalls.removeFirst() }
    return subscribeModeCalls.first!
  }

  var setVideoStreamSettingsRequests: [DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest] = []
  var setVideoStreamSettingsResponses: [DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse] = []
  func setVideoStreamSettings(_ request: DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest) throws -> DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse {
    setVideoStreamSettingsRequests.append(request)
    defer { setVideoStreamSettingsResponses.removeFirst() }
    return setVideoStreamSettingsResponses.first!
  }
  func setVideoStreamSettings(_ request: DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsCall {
    fatalError("not implemented")
  }

  var subscribeVideoStreamInfoRequests: [DronecodeSdk_Rpc_Camera_SubscribeVideoStreamInfoRequest] = []
  var subscribeVideoStreamInfoCalls: [DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall] = []
  func subscribeVideoStreamInfo(_ request: DronecodeSdk_Rpc_Camera_SubscribeVideoStreamInfoRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoCall {
    subscribeVideoStreamInfoRequests.append(request)
    defer { subscribeVideoStreamInfoCalls.removeFirst() }
    return subscribeVideoStreamInfoCalls.first!
  }

  var subscribeCaptureInfoRequests: [DronecodeSdk_Rpc_Camera_SubscribeCaptureInfoRequest] = []
  var subscribeCaptureInfoCalls: [DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall] = []
  func subscribeCaptureInfo(_ request: DronecodeSdk_Rpc_Camera_SubscribeCaptureInfoRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoCall {
    subscribeCaptureInfoRequests.append(request)
    defer { subscribeCaptureInfoCalls.removeFirst() }
    return subscribeCaptureInfoCalls.first!
  }

  var subscribeCameraStatusRequests: [DronecodeSdk_Rpc_Camera_SubscribeCameraStatusRequest] = []
  var subscribeCameraStatusCalls: [DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusCall] = []
  func subscribeCameraStatus(_ request: DronecodeSdk_Rpc_Camera_SubscribeCameraStatusRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusCall {
    subscribeCameraStatusRequests.append(request)
    defer { subscribeCameraStatusCalls.removeFirst() }
    return subscribeCameraStatusCalls.first!
  }

  var subscribeCurrentSettingsRequests: [DronecodeSdk_Rpc_Camera_SubscribeCurrentSettingsRequest] = []
  var subscribeCurrentSettingsCalls: [DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsCall] = []
  func subscribeCurrentSettings(_ request: DronecodeSdk_Rpc_Camera_SubscribeCurrentSettingsRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsCall {
    subscribeCurrentSettingsRequests.append(request)
    defer { subscribeCurrentSettingsCalls.removeFirst() }
    return subscribeCurrentSettingsCalls.first!
  }

  var subscribePossibleSettingOptionsRequests: [DronecodeSdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest] = []
  var subscribePossibleSettingOptionsCalls: [DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsCall] = []
  func subscribePossibleSettingOptions(_ request: DronecodeSdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsCall {
    subscribePossibleSettingOptionsRequests.append(request)
    defer { subscribePossibleSettingOptionsCalls.removeFirst() }
    return subscribePossibleSettingOptionsCalls.first!
  }

  var setSettingRequests: [DronecodeSdk_Rpc_Camera_SetSettingRequest] = []
  var setSettingResponses: [DronecodeSdk_Rpc_Camera_SetSettingResponse] = []
  func setSetting(_ request: DronecodeSdk_Rpc_Camera_SetSettingRequest) throws -> DronecodeSdk_Rpc_Camera_SetSettingResponse {
    setSettingRequests.append(request)
    defer { setSettingResponses.removeFirst() }
    return setSettingResponses.first!
  }
  func setSetting(_ request: DronecodeSdk_Rpc_Camera_SetSettingRequest, completion: @escaping (DronecodeSdk_Rpc_Camera_SetSettingResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Camera_CameraServiceSetSettingCall {
    fatalError("not implemented")
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol DronecodeSdk_Rpc_Camera_CameraServiceProvider {
  func takePhoto(request: DronecodeSdk_Rpc_Camera_TakePhotoRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoSession) throws -> DronecodeSdk_Rpc_Camera_TakePhotoResponse
  func startPhotoInterval(request: DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalSession) throws -> DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse
  func stopPhotoInterval(request: DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalSession) throws -> DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse
  func startVideo(request: DronecodeSdk_Rpc_Camera_StartVideoRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceStartVideoSession) throws -> DronecodeSdk_Rpc_Camera_StartVideoResponse
  func stopVideo(request: DronecodeSdk_Rpc_Camera_StopVideoRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceStopVideoSession) throws -> DronecodeSdk_Rpc_Camera_StopVideoResponse
  func startVideoStreaming(request: DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingSession) throws -> DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse
  func stopVideoStreaming(request: DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingSession) throws -> DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse
  func setMode(request: DronecodeSdk_Rpc_Camera_SetModeRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceSetModeSession) throws -> DronecodeSdk_Rpc_Camera_SetModeResponse
  func subscribeMode(request: DronecodeSdk_Rpc_Camera_SubscribeModeRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeSession) throws
  func setVideoStreamSettings(request: DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsSession) throws -> DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse
  func subscribeVideoStreamInfo(request: DronecodeSdk_Rpc_Camera_SubscribeVideoStreamInfoRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSession) throws
  func subscribeCaptureInfo(request: DronecodeSdk_Rpc_Camera_SubscribeCaptureInfoRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoSession) throws
  func subscribeCameraStatus(request: DronecodeSdk_Rpc_Camera_SubscribeCameraStatusRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusSession) throws
  func subscribeCurrentSettings(request: DronecodeSdk_Rpc_Camera_SubscribeCurrentSettingsRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsSession) throws
  func subscribePossibleSettingOptions(request: DronecodeSdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsSession) throws
  func setSetting(request: DronecodeSdk_Rpc_Camera_SetSettingRequest, session: DronecodeSdk_Rpc_Camera_CameraServiceSetSettingSession) throws -> DronecodeSdk_Rpc_Camera_SetSettingResponse
}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Camera_TakePhotoRequest, DronecodeSdk_Rpc_Camera_TakePhotoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest, DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse>, DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest, DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse>, DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceStartVideoSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceStartVideoSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Camera_StartVideoRequest, DronecodeSdk_Rpc_Camera_StartVideoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceStartVideoSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceStartVideoSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Camera_CameraServiceStartVideoSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceStopVideoSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceStopVideoSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Camera_StopVideoRequest, DronecodeSdk_Rpc_Camera_StopVideoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceStopVideoSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceStopVideoSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Camera_CameraServiceStopVideoSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest, DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse>, DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest, DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse>, DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSetModeSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSetModeSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Camera_SetModeRequest, DronecodeSdk_Rpc_Camera_SetModeResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSetModeSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceSetModeSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Camera_CameraServiceSetModeSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Camera_ModeResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Camera_ModeResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Camera_ModeResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Camera_SubscribeModeRequest, DronecodeSdk_Rpc_Camera_ModeResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Camera_ModeResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest, DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Camera_SubscribeVideoStreamInfoRequest, DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Camera_CaptureInfoResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Camera_CaptureInfoResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Camera_CaptureInfoResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Camera_SubscribeCaptureInfoRequest, DronecodeSdk_Rpc_Camera_CaptureInfoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Camera_CaptureInfoResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Camera_CameraStatusResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Camera_CameraStatusResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Camera_CameraStatusResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Camera_SubscribeCameraStatusRequest, DronecodeSdk_Rpc_Camera_CameraStatusResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Camera_CameraStatusResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Camera_CurrentSettingsResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Camera_CurrentSettingsResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Camera_CurrentSettingsResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Camera_SubscribeCurrentSettingsRequest, DronecodeSdk_Rpc_Camera_CurrentSettingsResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Camera_CurrentSettingsResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest, DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsSession {}

internal protocol DronecodeSdk_Rpc_Camera_CameraServiceSetSettingSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Camera_CameraServiceSetSettingSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Camera_SetSettingRequest, DronecodeSdk_Rpc_Camera_SetSettingResponse>, DronecodeSdk_Rpc_Camera_CameraServiceSetSettingSession {}

class DronecodeSdk_Rpc_Camera_CameraServiceSetSettingSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Camera_CameraServiceSetSettingSession {}


/// Main server for generated service
internal final class DronecodeSdk_Rpc_Camera_CameraServiceServer: ServiceServer {
  private let provider: DronecodeSdk_Rpc_Camera_CameraServiceProvider

  internal init(address: String, provider: DronecodeSdk_Rpc_Camera_CameraServiceProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: DronecodeSdk_Rpc_Camera_CameraServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: DronecodeSdk_Rpc_Camera_CameraServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Start the server.
  internal override func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/dronecode_sdk.rpc.camera.CameraService/TakePhoto":
      try DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoSessionBase(
        handler: handler,
        providerBlock: { try provider.takePhoto(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceTakePhotoSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/StartPhotoInterval":
      try DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalSessionBase(
        handler: handler,
        providerBlock: { try provider.startPhotoInterval(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceStartPhotoIntervalSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/StopPhotoInterval":
      try DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalSessionBase(
        handler: handler,
        providerBlock: { try provider.stopPhotoInterval(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceStopPhotoIntervalSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/StartVideo":
      try DronecodeSdk_Rpc_Camera_CameraServiceStartVideoSessionBase(
        handler: handler,
        providerBlock: { try provider.startVideo(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceStartVideoSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/StopVideo":
      try DronecodeSdk_Rpc_Camera_CameraServiceStopVideoSessionBase(
        handler: handler,
        providerBlock: { try provider.stopVideo(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceStopVideoSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/StartVideoStreaming":
      try DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingSessionBase(
        handler: handler,
        providerBlock: { try provider.startVideoStreaming(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceStartVideoStreamingSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/StopVideoStreaming":
      try DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingSessionBase(
        handler: handler,
        providerBlock: { try provider.stopVideoStreaming(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceStopVideoStreamingSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/SetMode":
      try DronecodeSdk_Rpc_Camera_CameraServiceSetModeSessionBase(
        handler: handler,
        providerBlock: { try provider.setMode(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceSetModeSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/SubscribeMode":
      try DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeMode(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceSubscribeModeSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/SetVideoStreamSettings":
      try DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsSessionBase(
        handler: handler,
        providerBlock: { try provider.setVideoStreamSettings(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceSetVideoStreamSettingsSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/SubscribeVideoStreamInfo":
      try DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeVideoStreamInfo(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceSubscribeVideoStreamInfoSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/SubscribeCaptureInfo":
      try DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeCaptureInfo(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCaptureInfoSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/SubscribeCameraStatus":
      try DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeCameraStatus(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCameraStatusSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/SubscribeCurrentSettings":
      try DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeCurrentSettings(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceSubscribeCurrentSettingsSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/SubscribePossibleSettingOptions":
      try DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribePossibleSettingOptions(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceSubscribePossibleSettingOptionsSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.camera.CameraService/SetSetting":
      try DronecodeSdk_Rpc_Camera_CameraServiceSetSettingSessionBase(
        handler: handler,
        providerBlock: { try provider.setSetting(request: $0, session: $1 as! DronecodeSdk_Rpc_Camera_CameraServiceSetSettingSessionBase) })
          .run(queue: queue)
      return true
    default:
      return false
    }
  }
}

