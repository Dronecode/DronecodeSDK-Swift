//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: gimbal.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Mavsdk_Rpc_Gimbal_GimbalServiceClient, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Gimbal_GimbalServiceClientProtocol {
  func setPitchAndYaw(_ request: Mavsdk_Rpc_Gimbal_SetPitchAndYawRequest, callOptions: CallOptions?) -> UnaryCall<Mavsdk_Rpc_Gimbal_SetPitchAndYawRequest, Mavsdk_Rpc_Gimbal_SetPitchAndYawResponse>
  func setMode(_ request: Mavsdk_Rpc_Gimbal_SetModeRequest, callOptions: CallOptions?) -> UnaryCall<Mavsdk_Rpc_Gimbal_SetModeRequest, Mavsdk_Rpc_Gimbal_SetModeResponse>
  func setRoiLocation(_ request: Mavsdk_Rpc_Gimbal_SetRoiLocationRequest, callOptions: CallOptions?) -> UnaryCall<Mavsdk_Rpc_Gimbal_SetRoiLocationRequest, Mavsdk_Rpc_Gimbal_SetRoiLocationResponse>
}

internal final class Mavsdk_Rpc_Gimbal_GimbalServiceClient: GRPCClient, Mavsdk_Rpc_Gimbal_GimbalServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the mavsdk.rpc.gimbal.GimbalService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  ///
  ///
  /// Set gimbal pitch and yaw angles.
  ///
  /// This sets the desired pitch and yaw angles of a gimbal.
  /// Will return when the command is accepted, however, it might
  /// take the gimbal longer to actually be set to the new angles.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPitchAndYaw.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setPitchAndYaw(_ request: Mavsdk_Rpc_Gimbal_SetPitchAndYawRequest, callOptions: CallOptions? = nil) -> UnaryCall<Mavsdk_Rpc_Gimbal_SetPitchAndYawRequest, Mavsdk_Rpc_Gimbal_SetPitchAndYawResponse> {
    return self.makeUnaryCall(path: "/mavsdk.rpc.gimbal.GimbalService/SetPitchAndYaw",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  ///
  /// Set gimbal mode.
  ///
  /// This sets the desired yaw mode of a gimbal.
  /// Will return when the command is accepted. However, it might
  /// take the gimbal longer to actually be set to the new angles.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMode.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setMode(_ request: Mavsdk_Rpc_Gimbal_SetModeRequest, callOptions: CallOptions? = nil) -> UnaryCall<Mavsdk_Rpc_Gimbal_SetModeRequest, Mavsdk_Rpc_Gimbal_SetModeResponse> {
    return self.makeUnaryCall(path: "/mavsdk.rpc.gimbal.GimbalService/SetMode",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  ///
  /// Set gimbal region of interest (ROI).
  ///
  /// This sets a region of interest that the gimbal will point to.
  /// The gimbal will continue to point to the specified region until it
  /// receives a new command.
  /// The function will return when the command is accepted, however, it might
  /// take the gimbal longer to actually rotate to the ROI.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRoiLocation.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setRoiLocation(_ request: Mavsdk_Rpc_Gimbal_SetRoiLocationRequest, callOptions: CallOptions? = nil) -> UnaryCall<Mavsdk_Rpc_Gimbal_SetRoiLocationRequest, Mavsdk_Rpc_Gimbal_SetRoiLocationResponse> {
    return self.makeUnaryCall(path: "/mavsdk.rpc.gimbal.GimbalService/SetRoiLocation",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_Gimbal_GimbalServiceProvider: CallHandlerProvider {
  ///
  ///
  /// Set gimbal pitch and yaw angles.
  ///
  /// This sets the desired pitch and yaw angles of a gimbal.
  /// Will return when the command is accepted, however, it might
  /// take the gimbal longer to actually be set to the new angles.
  func setPitchAndYaw(request: Mavsdk_Rpc_Gimbal_SetPitchAndYawRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Gimbal_SetPitchAndYawResponse>
  ///
  /// Set gimbal mode.
  ///
  /// This sets the desired yaw mode of a gimbal.
  /// Will return when the command is accepted. However, it might
  /// take the gimbal longer to actually be set to the new angles.
  func setMode(request: Mavsdk_Rpc_Gimbal_SetModeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Gimbal_SetModeResponse>
  ///
  /// Set gimbal region of interest (ROI).
  ///
  /// This sets a region of interest that the gimbal will point to.
  /// The gimbal will continue to point to the specified region until it
  /// receives a new command.
  /// The function will return when the command is accepted, however, it might
  /// take the gimbal longer to actually rotate to the ROI.
  func setRoiLocation(request: Mavsdk_Rpc_Gimbal_SetRoiLocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Gimbal_SetRoiLocationResponse>
}

extension Mavsdk_Rpc_Gimbal_GimbalServiceProvider {
  internal var serviceName: String { return "mavsdk.rpc.gimbal.GimbalService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "SetPitchAndYaw":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setPitchAndYaw(request: request, context: context)
        }
      }

    case "SetMode":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setMode(request: request, context: context)
        }
      }

    case "SetRoiLocation":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setRoiLocation(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload` for request and response messages
extension Mavsdk_Rpc_Gimbal_SetPitchAndYawRequest: GRPCProtobufPayload {}
extension Mavsdk_Rpc_Gimbal_SetPitchAndYawResponse: GRPCProtobufPayload {}
extension Mavsdk_Rpc_Gimbal_SetModeRequest: GRPCProtobufPayload {}
extension Mavsdk_Rpc_Gimbal_SetModeResponse: GRPCProtobufPayload {}
extension Mavsdk_Rpc_Gimbal_SetRoiLocationRequest: GRPCProtobufPayload {}
extension Mavsdk_Rpc_Gimbal_SetRoiLocationResponse: GRPCProtobufPayload {}

