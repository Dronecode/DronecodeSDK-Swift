
public func {{ name.lower_camel_case }}({% for param in params %}{{ param.name.upper_camel_case }}: {{ param.type_info.name }}{{ ", " if not loop.last }}{% endfor %}) -> Completable {
    return Completable.create { completable in
        let {{ name.lower_camel_case }}Request = {{ package.upper_camel_case.title().replace('_', '').replace('.', '_') }}_{{ name.upper_camel_case }}Request()

        do {
            let {{ name.lower_camel_case }}Response = try self.service.{{ name.lower_camel_case }}({{ name.lower_camel_case }}Request)
            if ({{ name.lower_camel_case }}Response.{{ plugin_name.lower_camel_case }}Result.result == {{ package.upper_camel_case.title().replace('_', '').replace('.', '_') }}_{{ plugin_name.upper_camel_case }}Result.Result.success) {
                completable(.completed)
            } else {
                completable(.error("Cannot {{ name.lower_camel_case }}: \({{ name.lower_camel_case }}Response.{{ plugin_name.lower_camel_case }}Result.result)"))
            }
        } catch {
            completable(.error(error))
        }

        return Disposables.create()
    }
    .subscribeOn(scheduler)
    .observeOn(MainScheduler.instance)
}
