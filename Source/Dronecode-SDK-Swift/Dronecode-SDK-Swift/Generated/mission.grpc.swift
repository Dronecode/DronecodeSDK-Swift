//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: mission/mission.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Mission_UploadMissionRequest, DronecodeSdk_Rpc_Mission_UploadMissionResponse>, DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionCall {
  override class var method: String { return "/dronecode_sdk.rpc.mission.MissionService/UploadMission" }
}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Mission_DownloadMissionRequest, DronecodeSdk_Rpc_Mission_DownloadMissionResponse>, DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionCall {
  override class var method: String { return "/dronecode_sdk.rpc.mission.MissionService/DownloadMission" }
}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceStartMissionCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceStartMissionCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Mission_StartMissionRequest, DronecodeSdk_Rpc_Mission_StartMissionResponse>, DronecodeSdk_Rpc_Mission_MissionServiceStartMissionCall {
  override class var method: String { return "/dronecode_sdk.rpc.mission.MissionService/StartMission" }
}

internal protocol DronecodeSdk_Rpc_Mission_MissionServicePauseMissionCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServicePauseMissionCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Mission_PauseMissionRequest, DronecodeSdk_Rpc_Mission_PauseMissionResponse>, DronecodeSdk_Rpc_Mission_MissionServicePauseMissionCall {
  override class var method: String { return "/dronecode_sdk.rpc.mission.MissionService/PauseMission" }
}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexRequest, DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexResponse>, DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCall {
  override class var method: String { return "/dronecode_sdk.rpc.mission.MissionService/SetCurrentMissionItemIndex" }
}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexRequest, DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexResponse>, DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCall {
  override class var method: String { return "/dronecode_sdk.rpc.mission.MissionService/GetCurrentMissionItemIndex" }
}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Mission_GetMissionCountRequest, DronecodeSdk_Rpc_Mission_GetMissionCountResponse>, DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountCall {
  override class var method: String { return "/dronecode_sdk.rpc.mission.MissionService/GetMissionCount" }
}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Mission_IsMissionFinishedRequest, DronecodeSdk_Rpc_Mission_IsMissionFinishedResponse>, DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedCall {
  override class var method: String { return "/dronecode_sdk.rpc.mission.MissionService/IsMissionFinished" }
}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Mission_MissionProgressResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Mission_MissionProgressResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Mission_MissionProgressResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Mission_SubscribeMissionProgressRequest, DronecodeSdk_Rpc_Mission_MissionProgressResponse>, DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
  override class var method: String { return "/dronecode_sdk.rpc.mission.MissionService/SubscribeMissionProgress" }
}

class DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Mission_MissionProgressResponse>, DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
  override class var method: String { return "/dronecode_sdk.rpc.mission.MissionService/SubscribeMissionProgress" }
}


/// Instantiate DronecodeSdk_Rpc_Mission_MissionServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol DronecodeSdk_Rpc_Mission_MissionServiceService: ServiceClient {
  /// Synchronous. Unary.
  func uploadMission(_ request: DronecodeSdk_Rpc_Mission_UploadMissionRequest) throws -> DronecodeSdk_Rpc_Mission_UploadMissionResponse
  /// Asynchronous. Unary.
  func uploadMission(_ request: DronecodeSdk_Rpc_Mission_UploadMissionRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_UploadMissionResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionCall

  /// Synchronous. Unary.
  func downloadMission(_ request: DronecodeSdk_Rpc_Mission_DownloadMissionRequest) throws -> DronecodeSdk_Rpc_Mission_DownloadMissionResponse
  /// Asynchronous. Unary.
  func downloadMission(_ request: DronecodeSdk_Rpc_Mission_DownloadMissionRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_DownloadMissionResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionCall

  /// Synchronous. Unary.
  func startMission(_ request: DronecodeSdk_Rpc_Mission_StartMissionRequest) throws -> DronecodeSdk_Rpc_Mission_StartMissionResponse
  /// Asynchronous. Unary.
  func startMission(_ request: DronecodeSdk_Rpc_Mission_StartMissionRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_StartMissionResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceStartMissionCall

  /// Synchronous. Unary.
  func pauseMission(_ request: DronecodeSdk_Rpc_Mission_PauseMissionRequest) throws -> DronecodeSdk_Rpc_Mission_PauseMissionResponse
  /// Asynchronous. Unary.
  func pauseMission(_ request: DronecodeSdk_Rpc_Mission_PauseMissionRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_PauseMissionResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServicePauseMissionCall

  /// Synchronous. Unary.
  func setCurrentMissionItemIndex(_ request: DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexRequest) throws -> DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexResponse
  /// Asynchronous. Unary.
  func setCurrentMissionItemIndex(_ request: DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCall

  /// Synchronous. Unary.
  func getCurrentMissionItemIndex(_ request: DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexRequest) throws -> DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexResponse
  /// Asynchronous. Unary.
  func getCurrentMissionItemIndex(_ request: DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCall

  /// Synchronous. Unary.
  func getMissionCount(_ request: DronecodeSdk_Rpc_Mission_GetMissionCountRequest) throws -> DronecodeSdk_Rpc_Mission_GetMissionCountResponse
  /// Asynchronous. Unary.
  func getMissionCount(_ request: DronecodeSdk_Rpc_Mission_GetMissionCountRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_GetMissionCountResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountCall

  /// Synchronous. Unary.
  func isMissionFinished(_ request: DronecodeSdk_Rpc_Mission_IsMissionFinishedRequest) throws -> DronecodeSdk_Rpc_Mission_IsMissionFinishedResponse
  /// Asynchronous. Unary.
  func isMissionFinished(_ request: DronecodeSdk_Rpc_Mission_IsMissionFinishedRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_IsMissionFinishedResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeMissionProgress(_ request: DronecodeSdk_Rpc_Mission_SubscribeMissionProgressRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall

}

internal final class DronecodeSdk_Rpc_Mission_MissionServiceServiceClient: ServiceClientBase, DronecodeSdk_Rpc_Mission_MissionServiceService {
  /// Synchronous. Unary.
  internal func uploadMission(_ request: DronecodeSdk_Rpc_Mission_UploadMissionRequest) throws -> DronecodeSdk_Rpc_Mission_UploadMissionResponse {
    return try DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func uploadMission(_ request: DronecodeSdk_Rpc_Mission_UploadMissionRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_UploadMissionResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionCall {
    return try DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func downloadMission(_ request: DronecodeSdk_Rpc_Mission_DownloadMissionRequest) throws -> DronecodeSdk_Rpc_Mission_DownloadMissionResponse {
    return try DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func downloadMission(_ request: DronecodeSdk_Rpc_Mission_DownloadMissionRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_DownloadMissionResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionCall {
    return try DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func startMission(_ request: DronecodeSdk_Rpc_Mission_StartMissionRequest) throws -> DronecodeSdk_Rpc_Mission_StartMissionResponse {
    return try DronecodeSdk_Rpc_Mission_MissionServiceStartMissionCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func startMission(_ request: DronecodeSdk_Rpc_Mission_StartMissionRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_StartMissionResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceStartMissionCall {
    return try DronecodeSdk_Rpc_Mission_MissionServiceStartMissionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func pauseMission(_ request: DronecodeSdk_Rpc_Mission_PauseMissionRequest) throws -> DronecodeSdk_Rpc_Mission_PauseMissionResponse {
    return try DronecodeSdk_Rpc_Mission_MissionServicePauseMissionCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func pauseMission(_ request: DronecodeSdk_Rpc_Mission_PauseMissionRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_PauseMissionResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServicePauseMissionCall {
    return try DronecodeSdk_Rpc_Mission_MissionServicePauseMissionCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setCurrentMissionItemIndex(_ request: DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexRequest) throws -> DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexResponse {
    return try DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func setCurrentMissionItemIndex(_ request: DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCall {
    return try DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getCurrentMissionItemIndex(_ request: DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexRequest) throws -> DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexResponse {
    return try DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getCurrentMissionItemIndex(_ request: DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCall {
    return try DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getMissionCount(_ request: DronecodeSdk_Rpc_Mission_GetMissionCountRequest) throws -> DronecodeSdk_Rpc_Mission_GetMissionCountResponse {
    return try DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getMissionCount(_ request: DronecodeSdk_Rpc_Mission_GetMissionCountRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_GetMissionCountResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountCall {
    return try DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func isMissionFinished(_ request: DronecodeSdk_Rpc_Mission_IsMissionFinishedRequest) throws -> DronecodeSdk_Rpc_Mission_IsMissionFinishedResponse {
    return try DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func isMissionFinished(_ request: DronecodeSdk_Rpc_Mission_IsMissionFinishedRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_IsMissionFinishedResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedCall {
    return try DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeMissionProgress(_ request: DronecodeSdk_Rpc_Mission_SubscribeMissionProgressRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
    return try DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

class DronecodeSdk_Rpc_Mission_MissionServiceServiceTestStub: ServiceClientTestStubBase, DronecodeSdk_Rpc_Mission_MissionServiceService {
  var uploadMissionRequests: [DronecodeSdk_Rpc_Mission_UploadMissionRequest] = []
  var uploadMissionResponses: [DronecodeSdk_Rpc_Mission_UploadMissionResponse] = []
  func uploadMission(_ request: DronecodeSdk_Rpc_Mission_UploadMissionRequest) throws -> DronecodeSdk_Rpc_Mission_UploadMissionResponse {
    uploadMissionRequests.append(request)
    defer { uploadMissionResponses.removeFirst() }
    return uploadMissionResponses.first!
  }
  func uploadMission(_ request: DronecodeSdk_Rpc_Mission_UploadMissionRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_UploadMissionResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionCall {
    fatalError("not implemented")
  }

  var downloadMissionRequests: [DronecodeSdk_Rpc_Mission_DownloadMissionRequest] = []
  var downloadMissionResponses: [DronecodeSdk_Rpc_Mission_DownloadMissionResponse] = []
  func downloadMission(_ request: DronecodeSdk_Rpc_Mission_DownloadMissionRequest) throws -> DronecodeSdk_Rpc_Mission_DownloadMissionResponse {
    downloadMissionRequests.append(request)
    defer { downloadMissionResponses.removeFirst() }
    return downloadMissionResponses.first!
  }
  func downloadMission(_ request: DronecodeSdk_Rpc_Mission_DownloadMissionRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_DownloadMissionResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionCall {
    fatalError("not implemented")
  }

  var startMissionRequests: [DronecodeSdk_Rpc_Mission_StartMissionRequest] = []
  var startMissionResponses: [DronecodeSdk_Rpc_Mission_StartMissionResponse] = []
  func startMission(_ request: DronecodeSdk_Rpc_Mission_StartMissionRequest) throws -> DronecodeSdk_Rpc_Mission_StartMissionResponse {
    startMissionRequests.append(request)
    defer { startMissionResponses.removeFirst() }
    return startMissionResponses.first!
  }
  func startMission(_ request: DronecodeSdk_Rpc_Mission_StartMissionRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_StartMissionResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceStartMissionCall {
    fatalError("not implemented")
  }

  var pauseMissionRequests: [DronecodeSdk_Rpc_Mission_PauseMissionRequest] = []
  var pauseMissionResponses: [DronecodeSdk_Rpc_Mission_PauseMissionResponse] = []
  func pauseMission(_ request: DronecodeSdk_Rpc_Mission_PauseMissionRequest) throws -> DronecodeSdk_Rpc_Mission_PauseMissionResponse {
    pauseMissionRequests.append(request)
    defer { pauseMissionResponses.removeFirst() }
    return pauseMissionResponses.first!
  }
  func pauseMission(_ request: DronecodeSdk_Rpc_Mission_PauseMissionRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_PauseMissionResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServicePauseMissionCall {
    fatalError("not implemented")
  }

  var setCurrentMissionItemIndexRequests: [DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexRequest] = []
  var setCurrentMissionItemIndexResponses: [DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexResponse] = []
  func setCurrentMissionItemIndex(_ request: DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexRequest) throws -> DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexResponse {
    setCurrentMissionItemIndexRequests.append(request)
    defer { setCurrentMissionItemIndexResponses.removeFirst() }
    return setCurrentMissionItemIndexResponses.first!
  }
  func setCurrentMissionItemIndex(_ request: DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexCall {
    fatalError("not implemented")
  }

  var getCurrentMissionItemIndexRequests: [DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexRequest] = []
  var getCurrentMissionItemIndexResponses: [DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexResponse] = []
  func getCurrentMissionItemIndex(_ request: DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexRequest) throws -> DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexResponse {
    getCurrentMissionItemIndexRequests.append(request)
    defer { getCurrentMissionItemIndexResponses.removeFirst() }
    return getCurrentMissionItemIndexResponses.first!
  }
  func getCurrentMissionItemIndex(_ request: DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexCall {
    fatalError("not implemented")
  }

  var getMissionCountRequests: [DronecodeSdk_Rpc_Mission_GetMissionCountRequest] = []
  var getMissionCountResponses: [DronecodeSdk_Rpc_Mission_GetMissionCountResponse] = []
  func getMissionCount(_ request: DronecodeSdk_Rpc_Mission_GetMissionCountRequest) throws -> DronecodeSdk_Rpc_Mission_GetMissionCountResponse {
    getMissionCountRequests.append(request)
    defer { getMissionCountResponses.removeFirst() }
    return getMissionCountResponses.first!
  }
  func getMissionCount(_ request: DronecodeSdk_Rpc_Mission_GetMissionCountRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_GetMissionCountResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountCall {
    fatalError("not implemented")
  }

  var isMissionFinishedRequests: [DronecodeSdk_Rpc_Mission_IsMissionFinishedRequest] = []
  var isMissionFinishedResponses: [DronecodeSdk_Rpc_Mission_IsMissionFinishedResponse] = []
  func isMissionFinished(_ request: DronecodeSdk_Rpc_Mission_IsMissionFinishedRequest) throws -> DronecodeSdk_Rpc_Mission_IsMissionFinishedResponse {
    isMissionFinishedRequests.append(request)
    defer { isMissionFinishedResponses.removeFirst() }
    return isMissionFinishedResponses.first!
  }
  func isMissionFinished(_ request: DronecodeSdk_Rpc_Mission_IsMissionFinishedRequest, completion: @escaping (DronecodeSdk_Rpc_Mission_IsMissionFinishedResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedCall {
    fatalError("not implemented")
  }

  var subscribeMissionProgressRequests: [DronecodeSdk_Rpc_Mission_SubscribeMissionProgressRequest] = []
  var subscribeMissionProgressCalls: [DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall] = []
  func subscribeMissionProgress(_ request: DronecodeSdk_Rpc_Mission_SubscribeMissionProgressRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressCall {
    subscribeMissionProgressRequests.append(request)
    defer { subscribeMissionProgressCalls.removeFirst() }
    return subscribeMissionProgressCalls.first!
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol DronecodeSdk_Rpc_Mission_MissionServiceProvider {
  func uploadMission(request: DronecodeSdk_Rpc_Mission_UploadMissionRequest, session: DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionSession) throws -> DronecodeSdk_Rpc_Mission_UploadMissionResponse
  func downloadMission(request: DronecodeSdk_Rpc_Mission_DownloadMissionRequest, session: DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionSession) throws -> DronecodeSdk_Rpc_Mission_DownloadMissionResponse
  func startMission(request: DronecodeSdk_Rpc_Mission_StartMissionRequest, session: DronecodeSdk_Rpc_Mission_MissionServiceStartMissionSession) throws -> DronecodeSdk_Rpc_Mission_StartMissionResponse
  func pauseMission(request: DronecodeSdk_Rpc_Mission_PauseMissionRequest, session: DronecodeSdk_Rpc_Mission_MissionServicePauseMissionSession) throws -> DronecodeSdk_Rpc_Mission_PauseMissionResponse
  func setCurrentMissionItemIndex(request: DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexRequest, session: DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSession) throws -> DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexResponse
  func getCurrentMissionItemIndex(request: DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexRequest, session: DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSession) throws -> DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexResponse
  func getMissionCount(request: DronecodeSdk_Rpc_Mission_GetMissionCountRequest, session: DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountSession) throws -> DronecodeSdk_Rpc_Mission_GetMissionCountResponse
  func isMissionFinished(request: DronecodeSdk_Rpc_Mission_IsMissionFinishedRequest, session: DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedSession) throws -> DronecodeSdk_Rpc_Mission_IsMissionFinishedResponse
  func subscribeMissionProgress(request: DronecodeSdk_Rpc_Mission_SubscribeMissionProgressRequest, session: DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSession) throws
}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Mission_UploadMissionRequest, DronecodeSdk_Rpc_Mission_UploadMissionResponse>, DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionSession {}

class DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionSession {}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Mission_DownloadMissionRequest, DronecodeSdk_Rpc_Mission_DownloadMissionResponse>, DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionSession {}

class DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionSession {}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceStartMissionSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceStartMissionSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Mission_StartMissionRequest, DronecodeSdk_Rpc_Mission_StartMissionResponse>, DronecodeSdk_Rpc_Mission_MissionServiceStartMissionSession {}

class DronecodeSdk_Rpc_Mission_MissionServiceStartMissionSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Mission_MissionServiceStartMissionSession {}

internal protocol DronecodeSdk_Rpc_Mission_MissionServicePauseMissionSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServicePauseMissionSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Mission_PauseMissionRequest, DronecodeSdk_Rpc_Mission_PauseMissionResponse>, DronecodeSdk_Rpc_Mission_MissionServicePauseMissionSession {}

class DronecodeSdk_Rpc_Mission_MissionServicePauseMissionSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Mission_MissionServicePauseMissionSession {}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexRequest, DronecodeSdk_Rpc_Mission_SetCurrentMissionItemIndexResponse>, DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSession {}

class DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSession {}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexRequest, DronecodeSdk_Rpc_Mission_GetCurrentMissionItemIndexResponse>, DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSession {}

class DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSession {}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Mission_GetMissionCountRequest, DronecodeSdk_Rpc_Mission_GetMissionCountResponse>, DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountSession {}

class DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountSession {}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Mission_IsMissionFinishedRequest, DronecodeSdk_Rpc_Mission_IsMissionFinishedResponse>, DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedSession {}

class DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedSession {}

internal protocol DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Mission_MissionProgressResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Mission_MissionProgressResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// You MUST call this method once you are done processing the request.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Mission_MissionProgressResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Mission_SubscribeMissionProgressRequest, DronecodeSdk_Rpc_Mission_MissionProgressResponse>, DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSession {}

class DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Mission_MissionProgressResponse>, DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSession {}


/// Main server for generated service
internal final class DronecodeSdk_Rpc_Mission_MissionServiceServer: ServiceServer {
  private let provider: DronecodeSdk_Rpc_Mission_MissionServiceProvider

  internal init(address: String, provider: DronecodeSdk_Rpc_Mission_MissionServiceProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: DronecodeSdk_Rpc_Mission_MissionServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: DronecodeSdk_Rpc_Mission_MissionServiceProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Start the server.
  internal override func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/dronecode_sdk.rpc.mission.MissionService/UploadMission":
      try DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionSessionBase(
        handler: handler,
        providerBlock: { try provider.uploadMission(request: $0, session: $1 as! DronecodeSdk_Rpc_Mission_MissionServiceUploadMissionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.mission.MissionService/DownloadMission":
      try DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionSessionBase(
        handler: handler,
        providerBlock: { try provider.downloadMission(request: $0, session: $1 as! DronecodeSdk_Rpc_Mission_MissionServiceDownloadMissionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.mission.MissionService/StartMission":
      try DronecodeSdk_Rpc_Mission_MissionServiceStartMissionSessionBase(
        handler: handler,
        providerBlock: { try provider.startMission(request: $0, session: $1 as! DronecodeSdk_Rpc_Mission_MissionServiceStartMissionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.mission.MissionService/PauseMission":
      try DronecodeSdk_Rpc_Mission_MissionServicePauseMissionSessionBase(
        handler: handler,
        providerBlock: { try provider.pauseMission(request: $0, session: $1 as! DronecodeSdk_Rpc_Mission_MissionServicePauseMissionSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.mission.MissionService/SetCurrentMissionItemIndex":
      try DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSessionBase(
        handler: handler,
        providerBlock: { try provider.setCurrentMissionItemIndex(request: $0, session: $1 as! DronecodeSdk_Rpc_Mission_MissionServiceSetCurrentMissionItemIndexSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.mission.MissionService/GetCurrentMissionItemIndex":
      try DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSessionBase(
        handler: handler,
        providerBlock: { try provider.getCurrentMissionItemIndex(request: $0, session: $1 as! DronecodeSdk_Rpc_Mission_MissionServiceGetCurrentMissionItemIndexSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.mission.MissionService/GetMissionCount":
      try DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountSessionBase(
        handler: handler,
        providerBlock: { try provider.getMissionCount(request: $0, session: $1 as! DronecodeSdk_Rpc_Mission_MissionServiceGetMissionCountSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.mission.MissionService/IsMissionFinished":
      try DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedSessionBase(
        handler: handler,
        providerBlock: { try provider.isMissionFinished(request: $0, session: $1 as! DronecodeSdk_Rpc_Mission_MissionServiceIsMissionFinishedSessionBase) })
          .run(queue: queue)
      return true
    case "/dronecode_sdk.rpc.mission.MissionService/SubscribeMissionProgress":
      try DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSessionBase(
        handler: handler,
        providerBlock: { try provider.subscribeMissionProgress(request: $0, session: $1 as! DronecodeSdk_Rpc_Mission_MissionServiceSubscribeMissionProgressSessionBase) })
          .run(queue: queue)
      return true
    default:
      return false
    }
  }
}

