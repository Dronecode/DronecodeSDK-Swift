// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: camera.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum DronecodeSdk_Rpc_Camera_CameraMode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case photo // = 1
  case video // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .photo
    case 2: self = .video
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .photo: return 1
    case .video: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension DronecodeSdk_Rpc_Camera_CameraMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [DronecodeSdk_Rpc_Camera_CameraMode] = [
    .unknown,
    .photo,
    .video,
  ]
}

#endif  // swift(>=4.2)

struct DronecodeSdk_Rpc_Camera_TakePhotoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_TakePhotoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: DronecodeSdk_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? DronecodeSdk_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_uniqueStorage()._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var intervalS: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: DronecodeSdk_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? DronecodeSdk_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_uniqueStorage()._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: DronecodeSdk_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? DronecodeSdk_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_uniqueStorage()._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_StartVideoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_StartVideoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: DronecodeSdk_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? DronecodeSdk_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_uniqueStorage()._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_StopVideoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_StopVideoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: DronecodeSdk_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? DronecodeSdk_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_uniqueStorage()._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: DronecodeSdk_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? DronecodeSdk_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_uniqueStorage()._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: DronecodeSdk_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? DronecodeSdk_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_uniqueStorage()._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_SetModeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraMode: DronecodeSdk_Rpc_Camera_CameraMode = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_SetModeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: DronecodeSdk_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? DronecodeSdk_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_uniqueStorage()._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_SubscribeModeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_ModeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraMode: DronecodeSdk_Rpc_Camera_CameraMode = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var videoStreamSettings: DronecodeSdk_Rpc_Camera_VideoStreamSettings {
    get {return _storage._videoStreamSettings ?? DronecodeSdk_Rpc_Camera_VideoStreamSettings()}
    set {_uniqueStorage()._videoStreamSettings = newValue}
  }
  /// Returns true if `videoStreamSettings` has been explicitly set.
  var hasVideoStreamSettings: Bool {return _storage._videoStreamSettings != nil}
  /// Clears the value of `videoStreamSettings`. Subsequent reads from it will return its default value.
  mutating func clearVideoStreamSettings() {_uniqueStorage()._videoStreamSettings = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_SubscribeVideoStreamInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var videoStreamInfo: DronecodeSdk_Rpc_Camera_VideoStreamInfo {
    get {return _storage._videoStreamInfo ?? DronecodeSdk_Rpc_Camera_VideoStreamInfo()}
    set {_uniqueStorage()._videoStreamInfo = newValue}
  }
  /// Returns true if `videoStreamInfo` has been explicitly set.
  var hasVideoStreamInfo: Bool {return _storage._videoStreamInfo != nil}
  /// Clears the value of `videoStreamInfo`. Subsequent reads from it will return its default value.
  mutating func clearVideoStreamInfo() {_uniqueStorage()._videoStreamInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_SubscribeCaptureInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_CaptureInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var captureInfo: DronecodeSdk_Rpc_Camera_CaptureInfo {
    get {return _storage._captureInfo ?? DronecodeSdk_Rpc_Camera_CaptureInfo()}
    set {_uniqueStorage()._captureInfo = newValue}
  }
  /// Returns true if `captureInfo` has been explicitly set.
  var hasCaptureInfo: Bool {return _storage._captureInfo != nil}
  /// Clears the value of `captureInfo`. Subsequent reads from it will return its default value.
  mutating func clearCaptureInfo() {_uniqueStorage()._captureInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_SubscribeCameraStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_CameraStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraStatus: DronecodeSdk_Rpc_Camera_CameraStatus {
    get {return _storage._cameraStatus ?? DronecodeSdk_Rpc_Camera_CameraStatus()}
    set {_uniqueStorage()._cameraStatus = newValue}
  }
  /// Returns true if `cameraStatus` has been explicitly set.
  var hasCameraStatus: Bool {return _storage._cameraStatus != nil}
  /// Clears the value of `cameraStatus`. Subsequent reads from it will return its default value.
  mutating func clearCameraStatus() {_uniqueStorage()._cameraStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_SubscribeCurrentSettingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_CurrentSettingsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var currentSettings: [DronecodeSdk_Rpc_Camera_Setting] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var settingOptions: [DronecodeSdk_Rpc_Camera_SettingOptions] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_SetSettingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var setting: DronecodeSdk_Rpc_Camera_Setting {
    get {return _storage._setting ?? DronecodeSdk_Rpc_Camera_Setting()}
    set {_uniqueStorage()._setting = newValue}
  }
  /// Returns true if `setting` has been explicitly set.
  var hasSetting: Bool {return _storage._setting != nil}
  /// Clears the value of `setting`. Subsequent reads from it will return its default value.
  mutating func clearSetting() {_uniqueStorage()._setting = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_SetSettingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cameraResult: DronecodeSdk_Rpc_Camera_CameraResult {
    get {return _storage._cameraResult ?? DronecodeSdk_Rpc_Camera_CameraResult()}
    set {_uniqueStorage()._cameraResult = newValue}
  }
  /// Returns true if `cameraResult` has been explicitly set.
  var hasCameraResult: Bool {return _storage._cameraResult != nil}
  /// Clears the value of `cameraResult`. Subsequent reads from it will return its default value.
  mutating func clearCameraResult() {_uniqueStorage()._cameraResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_CameraResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: DronecodeSdk_Rpc_Camera_CameraResult.Result = .unknown

  var resultStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case success // = 1
    case inProgress // = 2
    case busy // = 3
    case denied // = 4
    case error // = 5
    case timeout // = 6
    case wrongArgument // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .success
      case 2: self = .inProgress
      case 3: self = .busy
      case 4: self = .denied
      case 5: self = .error
      case 6: self = .timeout
      case 7: self = .wrongArgument
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .success: return 1
      case .inProgress: return 2
      case .busy: return 3
      case .denied: return 4
      case .error: return 5
      case .timeout: return 6
      case .wrongArgument: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension DronecodeSdk_Rpc_Camera_CameraResult.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [DronecodeSdk_Rpc_Camera_CameraResult.Result] = [
    .unknown,
    .success,
    .inProgress,
    .busy,
    .denied,
    .error,
    .timeout,
    .wrongArgument,
  ]
}

#endif  // swift(>=4.2)

struct DronecodeSdk_Rpc_Camera_CaptureInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var position: DronecodeSdk_Rpc_Camera_Position {
    get {return _storage._position ?? DronecodeSdk_Rpc_Camera_Position()}
    set {_uniqueStorage()._position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return _storage._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {_uniqueStorage()._position = nil}

  var attitudeQuaternion: DronecodeSdk_Rpc_Camera_Quaternion {
    get {return _storage._attitudeQuaternion ?? DronecodeSdk_Rpc_Camera_Quaternion()}
    set {_uniqueStorage()._attitudeQuaternion = newValue}
  }
  /// Returns true if `attitudeQuaternion` has been explicitly set.
  var hasAttitudeQuaternion: Bool {return _storage._attitudeQuaternion != nil}
  /// Clears the value of `attitudeQuaternion`. Subsequent reads from it will return its default value.
  mutating func clearAttitudeQuaternion() {_uniqueStorage()._attitudeQuaternion = nil}

  var attitudeEulerAngle: DronecodeSdk_Rpc_Camera_EulerAngle {
    get {return _storage._attitudeEulerAngle ?? DronecodeSdk_Rpc_Camera_EulerAngle()}
    set {_uniqueStorage()._attitudeEulerAngle = newValue}
  }
  /// Returns true if `attitudeEulerAngle` has been explicitly set.
  var hasAttitudeEulerAngle: Bool {return _storage._attitudeEulerAngle != nil}
  /// Clears the value of `attitudeEulerAngle`. Subsequent reads from it will return its default value.
  mutating func clearAttitudeEulerAngle() {_uniqueStorage()._attitudeEulerAngle = nil}

  var timeUtcUs: UInt64 {
    get {return _storage._timeUtcUs}
    set {_uniqueStorage()._timeUtcUs = newValue}
  }

  var isSuccess: Bool {
    get {return _storage._isSuccess}
    set {_uniqueStorage()._isSuccess = newValue}
  }

  var index: Int32 {
    get {return _storage._index}
    set {_uniqueStorage()._index = newValue}
  }

  var fileURL: String {
    get {return _storage._fileURL}
    set {_uniqueStorage()._fileURL = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_Position {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var latitudeDeg: Double = 0

  var longitudeDeg: Double = 0

  var absoluteAltitudeM: Float = 0

  var relativeAltitudeM: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_Quaternion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var w: Float = 0

  var x: Float = 0

  var y: Float = 0

  var z: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_EulerAngle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rollDeg: Float = 0

  var pitchDeg: Float = 0

  var yawDeg: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_VideoStreamSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var frameRateHz: Float = 0

  var horizontalResolutionPix: UInt32 = 0

  var verticalResolutionPix: UInt32 = 0

  var bitRateBS: UInt32 = 0

  var rotationDeg: UInt32 = 0

  var uri: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_VideoStreamInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var videoStreamSettings: DronecodeSdk_Rpc_Camera_VideoStreamSettings {
    get {return _storage._videoStreamSettings ?? DronecodeSdk_Rpc_Camera_VideoStreamSettings()}
    set {_uniqueStorage()._videoStreamSettings = newValue}
  }
  /// Returns true if `videoStreamSettings` has been explicitly set.
  var hasVideoStreamSettings: Bool {return _storage._videoStreamSettings != nil}
  /// Clears the value of `videoStreamSettings`. Subsequent reads from it will return its default value.
  mutating func clearVideoStreamSettings() {_uniqueStorage()._videoStreamSettings = nil}

  var videoStreamStatus: DronecodeSdk_Rpc_Camera_VideoStreamInfo.VideoStreamStatus {
    get {return _storage._videoStreamStatus}
    set {_uniqueStorage()._videoStreamStatus = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum VideoStreamStatus: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case notRunning // = 0
    case inProgress // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .notRunning
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .notRunning
      case 1: self = .inProgress
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .notRunning: return 0
      case .inProgress: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension DronecodeSdk_Rpc_Camera_VideoStreamInfo.VideoStreamStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [DronecodeSdk_Rpc_Camera_VideoStreamInfo.VideoStreamStatus] = [
    .notRunning,
    .inProgress,
  ]
}

#endif  // swift(>=4.2)

struct DronecodeSdk_Rpc_Camera_CameraStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var videoOn: Bool = false

  var photoIntervalOn: Bool = false

  var usedStorageMib: Float = 0

  var availableStorageMib: Float = 0

  var totalStorageMib: Float = 0

  var recordingTimeS: Float = 0

  var mediaFolderName: String = String()

  var storageStatus: DronecodeSdk_Rpc_Camera_CameraStatus.StorageStatus = .notAvailable

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum StorageStatus: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case notAvailable // = 0
    case unformatted // = 1
    case formatted // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .notAvailable
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .notAvailable
      case 1: self = .unformatted
      case 2: self = .formatted
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .notAvailable: return 0
      case .unformatted: return 1
      case .formatted: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension DronecodeSdk_Rpc_Camera_CameraStatus.StorageStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [DronecodeSdk_Rpc_Camera_CameraStatus.StorageStatus] = [
    .notAvailable,
    .unformatted,
    .formatted,
  ]
}

#endif  // swift(>=4.2)

struct DronecodeSdk_Rpc_Camera_Setting {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var settingID: String {
    get {return _storage._settingID}
    set {_uniqueStorage()._settingID = newValue}
  }

  var settingDescription: String {
    get {return _storage._settingDescription}
    set {_uniqueStorage()._settingDescription = newValue}
  }

  var option: DronecodeSdk_Rpc_Camera_Option {
    get {return _storage._option ?? DronecodeSdk_Rpc_Camera_Option()}
    set {_uniqueStorage()._option = newValue}
  }
  /// Returns true if `option` has been explicitly set.
  var hasOption: Bool {return _storage._option != nil}
  /// Clears the value of `option`. Subsequent reads from it will return its default value.
  mutating func clearOption() {_uniqueStorage()._option = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DronecodeSdk_Rpc_Camera_Option {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var optionID: String = String()

  var optionDescription: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DronecodeSdk_Rpc_Camera_SettingOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var settingID: String = String()

  var settingDescription: String = String()

  var options: [DronecodeSdk_Rpc_Camera_Option] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dronecode_sdk.rpc.camera"

extension DronecodeSdk_Rpc_Camera_CameraMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "PHOTO"),
    2: .same(proto: "VIDEO"),
  ]
}

extension DronecodeSdk_Rpc_Camera_TakePhotoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TakePhotoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_TakePhotoRequest, rhs: DronecodeSdk_Rpc_Camera_TakePhotoRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_TakePhotoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TakePhotoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: DronecodeSdk_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_TakePhotoResponse, rhs: DronecodeSdk_Rpc_Camera_TakePhotoResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cameraResult != rhs_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartPhotoIntervalRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "interval_s"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.intervalS)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.intervalS != 0 {
      try visitor.visitSingularFloatField(value: self.intervalS, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest, rhs: DronecodeSdk_Rpc_Camera_StartPhotoIntervalRequest) -> Bool {
    if lhs.intervalS != rhs.intervalS {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartPhotoIntervalResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: DronecodeSdk_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse, rhs: DronecodeSdk_Rpc_Camera_StartPhotoIntervalResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cameraResult != rhs_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopPhotoIntervalRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest, rhs: DronecodeSdk_Rpc_Camera_StopPhotoIntervalRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopPhotoIntervalResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: DronecodeSdk_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse, rhs: DronecodeSdk_Rpc_Camera_StopPhotoIntervalResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cameraResult != rhs_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_StartVideoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartVideoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_StartVideoRequest, rhs: DronecodeSdk_Rpc_Camera_StartVideoRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_StartVideoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartVideoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: DronecodeSdk_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_StartVideoResponse, rhs: DronecodeSdk_Rpc_Camera_StartVideoResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cameraResult != rhs_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_StopVideoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopVideoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_StopVideoRequest, rhs: DronecodeSdk_Rpc_Camera_StopVideoRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_StopVideoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopVideoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: DronecodeSdk_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_StopVideoResponse, rhs: DronecodeSdk_Rpc_Camera_StopVideoResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cameraResult != rhs_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartVideoStreamingRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest, rhs: DronecodeSdk_Rpc_Camera_StartVideoStreamingRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartVideoStreamingResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: DronecodeSdk_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse, rhs: DronecodeSdk_Rpc_Camera_StartVideoStreamingResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cameraResult != rhs_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopVideoStreamingRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest, rhs: DronecodeSdk_Rpc_Camera_StopVideoStreamingRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StopVideoStreamingResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: DronecodeSdk_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse, rhs: DronecodeSdk_Rpc_Camera_StopVideoStreamingResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cameraResult != rhs_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SetModeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetModeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.cameraMode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cameraMode != .unknown {
      try visitor.visitSingularEnumField(value: self.cameraMode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SetModeRequest, rhs: DronecodeSdk_Rpc_Camera_SetModeRequest) -> Bool {
    if lhs.cameraMode != rhs.cameraMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SetModeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetModeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: DronecodeSdk_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SetModeResponse, rhs: DronecodeSdk_Rpc_Camera_SetModeResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cameraResult != rhs_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SubscribeModeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeModeRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SubscribeModeRequest, rhs: DronecodeSdk_Rpc_Camera_SubscribeModeRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_ModeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.cameraMode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cameraMode != .unknown {
      try visitor.visitSingularEnumField(value: self.cameraMode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_ModeResponse, rhs: DronecodeSdk_Rpc_Camera_ModeResponse) -> Bool {
    if lhs.cameraMode != rhs.cameraMode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetVideoStreamSettingsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "video_stream_settings"),
  ]

  fileprivate class _StorageClass {
    var _videoStreamSettings: DronecodeSdk_Rpc_Camera_VideoStreamSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _videoStreamSettings = source._videoStreamSettings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._videoStreamSettings)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._videoStreamSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest, rhs: DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._videoStreamSettings != rhs_storage._videoStreamSettings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetVideoStreamSettingsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse, rhs: DronecodeSdk_Rpc_Camera_SetVideoStreamSettingsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SubscribeVideoStreamInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeVideoStreamInfoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SubscribeVideoStreamInfoRequest, rhs: DronecodeSdk_Rpc_Camera_SubscribeVideoStreamInfoRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoStreamInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "video_stream_info"),
  ]

  fileprivate class _StorageClass {
    var _videoStreamInfo: DronecodeSdk_Rpc_Camera_VideoStreamInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _videoStreamInfo = source._videoStreamInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._videoStreamInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._videoStreamInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse, rhs: DronecodeSdk_Rpc_Camera_VideoStreamInfoResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._videoStreamInfo != rhs_storage._videoStreamInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SubscribeCaptureInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeCaptureInfoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SubscribeCaptureInfoRequest, rhs: DronecodeSdk_Rpc_Camera_SubscribeCaptureInfoRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_CaptureInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CaptureInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "capture_info"),
  ]

  fileprivate class _StorageClass {
    var _captureInfo: DronecodeSdk_Rpc_Camera_CaptureInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _captureInfo = source._captureInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._captureInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._captureInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_CaptureInfoResponse, rhs: DronecodeSdk_Rpc_Camera_CaptureInfoResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._captureInfo != rhs_storage._captureInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SubscribeCameraStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeCameraStatusRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SubscribeCameraStatusRequest, rhs: DronecodeSdk_Rpc_Camera_SubscribeCameraStatusRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_CameraStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CameraStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_status"),
  ]

  fileprivate class _StorageClass {
    var _cameraStatus: DronecodeSdk_Rpc_Camera_CameraStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraStatus = source._cameraStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraStatus)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_CameraStatusResponse, rhs: DronecodeSdk_Rpc_Camera_CameraStatusResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cameraStatus != rhs_storage._cameraStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SubscribeCurrentSettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeCurrentSettingsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SubscribeCurrentSettingsRequest, rhs: DronecodeSdk_Rpc_Camera_SubscribeCurrentSettingsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_CurrentSettingsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CurrentSettingsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_settings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.currentSettings)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.currentSettings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.currentSettings, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_CurrentSettingsResponse, rhs: DronecodeSdk_Rpc_Camera_CurrentSettingsResponse) -> Bool {
    if lhs.currentSettings != rhs.currentSettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribePossibleSettingOptionsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest, rhs: DronecodeSdk_Rpc_Camera_SubscribePossibleSettingOptionsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PossibleSettingOptionsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "setting_options"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.settingOptions)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.settingOptions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.settingOptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse, rhs: DronecodeSdk_Rpc_Camera_PossibleSettingOptionsResponse) -> Bool {
    if lhs.settingOptions != rhs.settingOptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SetSettingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetSettingRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "setting"),
  ]

  fileprivate class _StorageClass {
    var _setting: DronecodeSdk_Rpc_Camera_Setting? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _setting = source._setting
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._setting)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._setting {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SetSettingRequest, rhs: DronecodeSdk_Rpc_Camera_SetSettingRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._setting != rhs_storage._setting {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SetSettingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetSettingResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_result"),
  ]

  fileprivate class _StorageClass {
    var _cameraResult: DronecodeSdk_Rpc_Camera_CameraResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraResult = source._cameraResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SetSettingResponse, rhs: DronecodeSdk_Rpc_Camera_SetSettingResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cameraResult != rhs_storage._cameraResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_CameraResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CameraResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "result_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.result)
      case 2: try decoder.decodeSingularStringField(value: &self.resultStr)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.resultStr.isEmpty {
      try visitor.visitSingularStringField(value: self.resultStr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_CameraResult, rhs: DronecodeSdk_Rpc_Camera_CameraResult) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.resultStr != rhs.resultStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_CameraResult.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "IN_PROGRESS"),
    3: .same(proto: "BUSY"),
    4: .same(proto: "DENIED"),
    5: .same(proto: "ERROR"),
    6: .same(proto: "TIMEOUT"),
    7: .same(proto: "WRONG_ARGUMENT"),
  ]
}

extension DronecodeSdk_Rpc_Camera_CaptureInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CaptureInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .standard(proto: "attitude_quaternion"),
    3: .standard(proto: "attitude_euler_angle"),
    4: .standard(proto: "time_utc_us"),
    5: .standard(proto: "is_success"),
    6: .same(proto: "index"),
    7: .standard(proto: "file_url"),
  ]

  fileprivate class _StorageClass {
    var _position: DronecodeSdk_Rpc_Camera_Position? = nil
    var _attitudeQuaternion: DronecodeSdk_Rpc_Camera_Quaternion? = nil
    var _attitudeEulerAngle: DronecodeSdk_Rpc_Camera_EulerAngle? = nil
    var _timeUtcUs: UInt64 = 0
    var _isSuccess: Bool = false
    var _index: Int32 = 0
    var _fileURL: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _position = source._position
      _attitudeQuaternion = source._attitudeQuaternion
      _attitudeEulerAngle = source._attitudeEulerAngle
      _timeUtcUs = source._timeUtcUs
      _isSuccess = source._isSuccess
      _index = source._index
      _fileURL = source._fileURL
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._position)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._attitudeQuaternion)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._attitudeEulerAngle)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._timeUtcUs)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._isSuccess)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._index)
        case 7: try decoder.decodeSingularStringField(value: &_storage._fileURL)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._attitudeQuaternion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._attitudeEulerAngle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._timeUtcUs != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._timeUtcUs, fieldNumber: 4)
      }
      if _storage._isSuccess != false {
        try visitor.visitSingularBoolField(value: _storage._isSuccess, fieldNumber: 5)
      }
      if _storage._index != 0 {
        try visitor.visitSingularInt32Field(value: _storage._index, fieldNumber: 6)
      }
      if !_storage._fileURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fileURL, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_CaptureInfo, rhs: DronecodeSdk_Rpc_Camera_CaptureInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._position != rhs_storage._position {return false}
        if _storage._attitudeQuaternion != rhs_storage._attitudeQuaternion {return false}
        if _storage._attitudeEulerAngle != rhs_storage._attitudeEulerAngle {return false}
        if _storage._timeUtcUs != rhs_storage._timeUtcUs {return false}
        if _storage._isSuccess != rhs_storage._isSuccess {return false}
        if _storage._index != rhs_storage._index {return false}
        if _storage._fileURL != rhs_storage._fileURL {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_Position: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Position"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "latitude_deg"),
    2: .standard(proto: "longitude_deg"),
    3: .standard(proto: "absolute_altitude_m"),
    4: .standard(proto: "relative_altitude_m"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.latitudeDeg)
      case 2: try decoder.decodeSingularDoubleField(value: &self.longitudeDeg)
      case 3: try decoder.decodeSingularFloatField(value: &self.absoluteAltitudeM)
      case 4: try decoder.decodeSingularFloatField(value: &self.relativeAltitudeM)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.latitudeDeg, fieldNumber: 1)
    }
    if self.longitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.longitudeDeg, fieldNumber: 2)
    }
    if self.absoluteAltitudeM != 0 {
      try visitor.visitSingularFloatField(value: self.absoluteAltitudeM, fieldNumber: 3)
    }
    if self.relativeAltitudeM != 0 {
      try visitor.visitSingularFloatField(value: self.relativeAltitudeM, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_Position, rhs: DronecodeSdk_Rpc_Camera_Position) -> Bool {
    if lhs.latitudeDeg != rhs.latitudeDeg {return false}
    if lhs.longitudeDeg != rhs.longitudeDeg {return false}
    if lhs.absoluteAltitudeM != rhs.absoluteAltitudeM {return false}
    if lhs.relativeAltitudeM != rhs.relativeAltitudeM {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_Quaternion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Quaternion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "w"),
    2: .same(proto: "x"),
    3: .same(proto: "y"),
    4: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.w)
      case 2: try decoder.decodeSingularFloatField(value: &self.x)
      case 3: try decoder.decodeSingularFloatField(value: &self.y)
      case 4: try decoder.decodeSingularFloatField(value: &self.z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.w != 0 {
      try visitor.visitSingularFloatField(value: self.w, fieldNumber: 1)
    }
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 2)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 3)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_Quaternion, rhs: DronecodeSdk_Rpc_Camera_Quaternion) -> Bool {
    if lhs.w != rhs.w {return false}
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_EulerAngle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EulerAngle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "roll_deg"),
    2: .standard(proto: "pitch_deg"),
    3: .standard(proto: "yaw_deg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.rollDeg)
      case 2: try decoder.decodeSingularFloatField(value: &self.pitchDeg)
      case 3: try decoder.decodeSingularFloatField(value: &self.yawDeg)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rollDeg != 0 {
      try visitor.visitSingularFloatField(value: self.rollDeg, fieldNumber: 1)
    }
    if self.pitchDeg != 0 {
      try visitor.visitSingularFloatField(value: self.pitchDeg, fieldNumber: 2)
    }
    if self.yawDeg != 0 {
      try visitor.visitSingularFloatField(value: self.yawDeg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_EulerAngle, rhs: DronecodeSdk_Rpc_Camera_EulerAngle) -> Bool {
    if lhs.rollDeg != rhs.rollDeg {return false}
    if lhs.pitchDeg != rhs.pitchDeg {return false}
    if lhs.yawDeg != rhs.yawDeg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_VideoStreamSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoStreamSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "frame_rate_hz"),
    2: .standard(proto: "horizontal_resolution_pix"),
    3: .standard(proto: "vertical_resolution_pix"),
    4: .standard(proto: "bit_rate_b_s"),
    5: .standard(proto: "rotation_deg"),
    6: .same(proto: "uri"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.frameRateHz)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.horizontalResolutionPix)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.verticalResolutionPix)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.bitRateBS)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.rotationDeg)
      case 6: try decoder.decodeSingularStringField(value: &self.uri)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.frameRateHz != 0 {
      try visitor.visitSingularFloatField(value: self.frameRateHz, fieldNumber: 1)
    }
    if self.horizontalResolutionPix != 0 {
      try visitor.visitSingularUInt32Field(value: self.horizontalResolutionPix, fieldNumber: 2)
    }
    if self.verticalResolutionPix != 0 {
      try visitor.visitSingularUInt32Field(value: self.verticalResolutionPix, fieldNumber: 3)
    }
    if self.bitRateBS != 0 {
      try visitor.visitSingularUInt32Field(value: self.bitRateBS, fieldNumber: 4)
    }
    if self.rotationDeg != 0 {
      try visitor.visitSingularUInt32Field(value: self.rotationDeg, fieldNumber: 5)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_VideoStreamSettings, rhs: DronecodeSdk_Rpc_Camera_VideoStreamSettings) -> Bool {
    if lhs.frameRateHz != rhs.frameRateHz {return false}
    if lhs.horizontalResolutionPix != rhs.horizontalResolutionPix {return false}
    if lhs.verticalResolutionPix != rhs.verticalResolutionPix {return false}
    if lhs.bitRateBS != rhs.bitRateBS {return false}
    if lhs.rotationDeg != rhs.rotationDeg {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_VideoStreamInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoStreamInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "video_stream_settings"),
    2: .standard(proto: "video_stream_status"),
  ]

  fileprivate class _StorageClass {
    var _videoStreamSettings: DronecodeSdk_Rpc_Camera_VideoStreamSettings? = nil
    var _videoStreamStatus: DronecodeSdk_Rpc_Camera_VideoStreamInfo.VideoStreamStatus = .notRunning

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _videoStreamSettings = source._videoStreamSettings
      _videoStreamStatus = source._videoStreamStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._videoStreamSettings)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._videoStreamStatus)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._videoStreamSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._videoStreamStatus != .notRunning {
        try visitor.visitSingularEnumField(value: _storage._videoStreamStatus, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_VideoStreamInfo, rhs: DronecodeSdk_Rpc_Camera_VideoStreamInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._videoStreamSettings != rhs_storage._videoStreamSettings {return false}
        if _storage._videoStreamStatus != rhs_storage._videoStreamStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_VideoStreamInfo.VideoStreamStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NOT_RUNNING"),
    1: .same(proto: "IN_PROGRESS"),
  ]
}

extension DronecodeSdk_Rpc_Camera_CameraStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CameraStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "video_on"),
    2: .standard(proto: "photo_interval_on"),
    3: .standard(proto: "used_storage_mib"),
    4: .standard(proto: "available_storage_mib"),
    5: .standard(proto: "total_storage_mib"),
    6: .standard(proto: "recording_time_s"),
    7: .standard(proto: "media_folder_name"),
    8: .standard(proto: "storage_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.videoOn)
      case 2: try decoder.decodeSingularBoolField(value: &self.photoIntervalOn)
      case 3: try decoder.decodeSingularFloatField(value: &self.usedStorageMib)
      case 4: try decoder.decodeSingularFloatField(value: &self.availableStorageMib)
      case 5: try decoder.decodeSingularFloatField(value: &self.totalStorageMib)
      case 6: try decoder.decodeSingularFloatField(value: &self.recordingTimeS)
      case 7: try decoder.decodeSingularStringField(value: &self.mediaFolderName)
      case 8: try decoder.decodeSingularEnumField(value: &self.storageStatus)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.videoOn != false {
      try visitor.visitSingularBoolField(value: self.videoOn, fieldNumber: 1)
    }
    if self.photoIntervalOn != false {
      try visitor.visitSingularBoolField(value: self.photoIntervalOn, fieldNumber: 2)
    }
    if self.usedStorageMib != 0 {
      try visitor.visitSingularFloatField(value: self.usedStorageMib, fieldNumber: 3)
    }
    if self.availableStorageMib != 0 {
      try visitor.visitSingularFloatField(value: self.availableStorageMib, fieldNumber: 4)
    }
    if self.totalStorageMib != 0 {
      try visitor.visitSingularFloatField(value: self.totalStorageMib, fieldNumber: 5)
    }
    if self.recordingTimeS != 0 {
      try visitor.visitSingularFloatField(value: self.recordingTimeS, fieldNumber: 6)
    }
    if !self.mediaFolderName.isEmpty {
      try visitor.visitSingularStringField(value: self.mediaFolderName, fieldNumber: 7)
    }
    if self.storageStatus != .notAvailable {
      try visitor.visitSingularEnumField(value: self.storageStatus, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_CameraStatus, rhs: DronecodeSdk_Rpc_Camera_CameraStatus) -> Bool {
    if lhs.videoOn != rhs.videoOn {return false}
    if lhs.photoIntervalOn != rhs.photoIntervalOn {return false}
    if lhs.usedStorageMib != rhs.usedStorageMib {return false}
    if lhs.availableStorageMib != rhs.availableStorageMib {return false}
    if lhs.totalStorageMib != rhs.totalStorageMib {return false}
    if lhs.recordingTimeS != rhs.recordingTimeS {return false}
    if lhs.mediaFolderName != rhs.mediaFolderName {return false}
    if lhs.storageStatus != rhs.storageStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_CameraStatus.StorageStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NOT_AVAILABLE"),
    1: .same(proto: "UNFORMATTED"),
    2: .same(proto: "FORMATTED"),
  ]
}

extension DronecodeSdk_Rpc_Camera_Setting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Setting"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "setting_id"),
    2: .standard(proto: "setting_description"),
    3: .same(proto: "option"),
  ]

  fileprivate class _StorageClass {
    var _settingID: String = String()
    var _settingDescription: String = String()
    var _option: DronecodeSdk_Rpc_Camera_Option? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _settingID = source._settingID
      _settingDescription = source._settingDescription
      _option = source._option
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._settingID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._settingDescription)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._option)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._settingID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._settingID, fieldNumber: 1)
      }
      if !_storage._settingDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._settingDescription, fieldNumber: 2)
      }
      if let v = _storage._option {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_Setting, rhs: DronecodeSdk_Rpc_Camera_Setting) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._settingID != rhs_storage._settingID {return false}
        if _storage._settingDescription != rhs_storage._settingDescription {return false}
        if _storage._option != rhs_storage._option {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_Option: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Option"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "option_id"),
    2: .standard(proto: "option_description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.optionID)
      case 2: try decoder.decodeSingularStringField(value: &self.optionDescription)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.optionID.isEmpty {
      try visitor.visitSingularStringField(value: self.optionID, fieldNumber: 1)
    }
    if !self.optionDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.optionDescription, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_Option, rhs: DronecodeSdk_Rpc_Camera_Option) -> Bool {
    if lhs.optionID != rhs.optionID {return false}
    if lhs.optionDescription != rhs.optionDescription {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DronecodeSdk_Rpc_Camera_SettingOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SettingOptions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "setting_id"),
    2: .standard(proto: "setting_description"),
    3: .same(proto: "options"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.settingID)
      case 2: try decoder.decodeSingularStringField(value: &self.settingDescription)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.options)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.settingID.isEmpty {
      try visitor.visitSingularStringField(value: self.settingID, fieldNumber: 1)
    }
    if !self.settingDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.settingDescription, fieldNumber: 2)
    }
    if !self.options.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.options, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DronecodeSdk_Rpc_Camera_SettingOptions, rhs: DronecodeSdk_Rpc_Camera_SettingOptions) -> Bool {
    if lhs.settingID != rhs.settingID {return false}
    if lhs.settingDescription != rhs.settingDescription {return false}
    if lhs.options != rhs.options {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
