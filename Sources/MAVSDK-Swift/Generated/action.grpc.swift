//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: action.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Mavsdk_Rpc_Action_ActionServiceClient, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Action_ActionServiceClientProtocol: GRPCClient {
  func arm(
    _ request: Mavsdk_Rpc_Action_ArmRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_ArmRequest, Mavsdk_Rpc_Action_ArmResponse>

  func disarm(
    _ request: Mavsdk_Rpc_Action_DisarmRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_DisarmRequest, Mavsdk_Rpc_Action_DisarmResponse>

  func takeoff(
    _ request: Mavsdk_Rpc_Action_TakeoffRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_TakeoffRequest, Mavsdk_Rpc_Action_TakeoffResponse>

  func land(
    _ request: Mavsdk_Rpc_Action_LandRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_LandRequest, Mavsdk_Rpc_Action_LandResponse>

  func reboot(
    _ request: Mavsdk_Rpc_Action_RebootRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_RebootRequest, Mavsdk_Rpc_Action_RebootResponse>

  func shutdown(
    _ request: Mavsdk_Rpc_Action_ShutdownRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_ShutdownRequest, Mavsdk_Rpc_Action_ShutdownResponse>

  func kill(
    _ request: Mavsdk_Rpc_Action_KillRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_KillRequest, Mavsdk_Rpc_Action_KillResponse>

  func returnToLaunch(
    _ request: Mavsdk_Rpc_Action_ReturnToLaunchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_ReturnToLaunchRequest, Mavsdk_Rpc_Action_ReturnToLaunchResponse>

  func gotoLocation(
    _ request: Mavsdk_Rpc_Action_GotoLocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_GotoLocationRequest, Mavsdk_Rpc_Action_GotoLocationResponse>

  func transitionToFixedwing(
    _ request: Mavsdk_Rpc_Action_TransitionToFixedwingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_TransitionToFixedwingRequest, Mavsdk_Rpc_Action_TransitionToFixedwingResponse>

  func transitionToMulticopter(
    _ request: Mavsdk_Rpc_Action_TransitionToMulticopterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_TransitionToMulticopterRequest, Mavsdk_Rpc_Action_TransitionToMulticopterResponse>

  func getTakeoffAltitude(
    _ request: Mavsdk_Rpc_Action_GetTakeoffAltitudeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_GetTakeoffAltitudeRequest, Mavsdk_Rpc_Action_GetTakeoffAltitudeResponse>

  func setTakeoffAltitude(
    _ request: Mavsdk_Rpc_Action_SetTakeoffAltitudeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_SetTakeoffAltitudeRequest, Mavsdk_Rpc_Action_SetTakeoffAltitudeResponse>

  func getMaximumSpeed(
    _ request: Mavsdk_Rpc_Action_GetMaximumSpeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_GetMaximumSpeedRequest, Mavsdk_Rpc_Action_GetMaximumSpeedResponse>

  func setMaximumSpeed(
    _ request: Mavsdk_Rpc_Action_SetMaximumSpeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_SetMaximumSpeedRequest, Mavsdk_Rpc_Action_SetMaximumSpeedResponse>

  func getReturnToLaunchAltitude(
    _ request: Mavsdk_Rpc_Action_GetReturnToLaunchAltitudeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_GetReturnToLaunchAltitudeRequest, Mavsdk_Rpc_Action_GetReturnToLaunchAltitudeResponse>

  func setReturnToLaunchAltitude(
    _ request: Mavsdk_Rpc_Action_SetReturnToLaunchAltitudeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_Action_SetReturnToLaunchAltitudeRequest, Mavsdk_Rpc_Action_SetReturnToLaunchAltitudeResponse>

}

extension Mavsdk_Rpc_Action_ActionServiceClientProtocol {

  ///
  /// Send command to arm the drone.
  ///
  /// Arming a drone normally causes motors to spin at idle.
  /// Before arming take all safety precautions and stand clear of the drone!
  ///
  /// - Parameters:
  ///   - request: Request to send to Arm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func arm(
    _ request: Mavsdk_Rpc_Action_ArmRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_ArmRequest, Mavsdk_Rpc_Action_ArmResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/Arm",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Send command to disarm the drone.
  ///
  /// This will disarm a drone that considers itself landed. If flying, the drone should
  /// reject the disarm command. Disarming means that all motors will stop.
  ///
  /// - Parameters:
  ///   - request: Request to send to Disarm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disarm(
    _ request: Mavsdk_Rpc_Action_DisarmRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_DisarmRequest, Mavsdk_Rpc_Action_DisarmResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/Disarm",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Send command to take off and hover.
  ///
  /// This switches the drone into position control mode and commands
  /// it to take off and hover at the takeoff altitude.
  ///
  /// Note that the vehicle must be armed before it can take off.
  ///
  /// - Parameters:
  ///   - request: Request to send to Takeoff.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func takeoff(
    _ request: Mavsdk_Rpc_Action_TakeoffRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_TakeoffRequest, Mavsdk_Rpc_Action_TakeoffResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/Takeoff",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Send command to land at the current position.
  ///
  /// This switches the drone to 'Land' flight mode.
  ///
  /// - Parameters:
  ///   - request: Request to send to Land.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func land(
    _ request: Mavsdk_Rpc_Action_LandRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_LandRequest, Mavsdk_Rpc_Action_LandResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/Land",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Send command to reboot the drone components.
  ///
  /// This will reboot the autopilot, companion computer, camera and gimbal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Reboot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func reboot(
    _ request: Mavsdk_Rpc_Action_RebootRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_RebootRequest, Mavsdk_Rpc_Action_RebootResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/Reboot",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Send command to shut down the drone components.
  ///
  /// This will shut down the autopilot, onboard computer, camera and gimbal.
  /// This command should only be used when the autopilot is disarmed and autopilots commonly
  /// reject it if they are not already ready to shut down.
  ///
  /// - Parameters:
  ///   - request: Request to send to Shutdown.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func shutdown(
    _ request: Mavsdk_Rpc_Action_ShutdownRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_ShutdownRequest, Mavsdk_Rpc_Action_ShutdownResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/Shutdown",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Send command to kill the drone.
  ///
  /// This will disarm a drone irrespective of whether it is landed or flying.
  /// Note that the drone will fall out of the sky if this command is used while flying.
  ///
  /// - Parameters:
  ///   - request: Request to send to Kill.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func kill(
    _ request: Mavsdk_Rpc_Action_KillRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_KillRequest, Mavsdk_Rpc_Action_KillResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/Kill",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Send command to return to the launch (takeoff) position and land.
  ///
  /// This switches the drone into [Return mode](https://docs.px4.io/master/en/flight_modes/return.html) which
  /// generally means it will rise up to a certain altitude to clear any obstacles before heading
  /// back to the launch (takeoff) position and land there.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReturnToLaunch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func returnToLaunch(
    _ request: Mavsdk_Rpc_Action_ReturnToLaunchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_ReturnToLaunchRequest, Mavsdk_Rpc_Action_ReturnToLaunchResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/ReturnToLaunch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Send command to move the vehicle to a specific global position.
  ///
  /// The latitude and longitude are given in degrees (WGS84 frame) and the altitude
  /// in meters AMSL (above mean sea level).
  ///
  /// The yaw angle is in degrees (frame is NED, 0 is North, positive is clockwise).
  ///
  /// - Parameters:
  ///   - request: Request to send to GotoLocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func gotoLocation(
    _ request: Mavsdk_Rpc_Action_GotoLocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_GotoLocationRequest, Mavsdk_Rpc_Action_GotoLocationResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/GotoLocation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Send command to transition the drone to fixedwing.
  ///
  /// The associated action will only be executed for VTOL vehicles (on other vehicle types the
  /// command will fail). The command will succeed if called when the vehicle
  /// is already in fixedwing mode.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransitionToFixedwing.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transitionToFixedwing(
    _ request: Mavsdk_Rpc_Action_TransitionToFixedwingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_TransitionToFixedwingRequest, Mavsdk_Rpc_Action_TransitionToFixedwingResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/TransitionToFixedwing",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Send command to transition the drone to multicopter.
  ///
  /// The associated action will only be executed for VTOL vehicles (on other vehicle types the
  /// command will fail). The command will succeed if called when the vehicle
  /// is already in multicopter mode.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransitionToMulticopter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transitionToMulticopter(
    _ request: Mavsdk_Rpc_Action_TransitionToMulticopterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_TransitionToMulticopterRequest, Mavsdk_Rpc_Action_TransitionToMulticopterResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/TransitionToMulticopter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Get the takeoff altitude (in meters above ground).
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTakeoffAltitude.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTakeoffAltitude(
    _ request: Mavsdk_Rpc_Action_GetTakeoffAltitudeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_GetTakeoffAltitudeRequest, Mavsdk_Rpc_Action_GetTakeoffAltitudeResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/GetTakeoffAltitude",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Set takeoff altitude (in meters above ground).
  ///
  /// - Parameters:
  ///   - request: Request to send to SetTakeoffAltitude.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setTakeoffAltitude(
    _ request: Mavsdk_Rpc_Action_SetTakeoffAltitudeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_SetTakeoffAltitudeRequest, Mavsdk_Rpc_Action_SetTakeoffAltitudeResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/SetTakeoffAltitude",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Get the vehicle maximum speed (in metres/second).
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMaximumSpeed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMaximumSpeed(
    _ request: Mavsdk_Rpc_Action_GetMaximumSpeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_GetMaximumSpeedRequest, Mavsdk_Rpc_Action_GetMaximumSpeedResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/GetMaximumSpeed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Set vehicle maximum speed (in metres/second).
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMaximumSpeed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setMaximumSpeed(
    _ request: Mavsdk_Rpc_Action_SetMaximumSpeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_SetMaximumSpeedRequest, Mavsdk_Rpc_Action_SetMaximumSpeedResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/SetMaximumSpeed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Get the return to launch minimum return altitude (in meters).
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReturnToLaunchAltitude.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getReturnToLaunchAltitude(
    _ request: Mavsdk_Rpc_Action_GetReturnToLaunchAltitudeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_GetReturnToLaunchAltitudeRequest, Mavsdk_Rpc_Action_GetReturnToLaunchAltitudeResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/GetReturnToLaunchAltitude",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///
  /// Set the return to launch minimum return altitude (in meters).
  ///
  /// - Parameters:
  ///   - request: Request to send to SetReturnToLaunchAltitude.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setReturnToLaunchAltitude(
    _ request: Mavsdk_Rpc_Action_SetReturnToLaunchAltitudeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_Action_SetReturnToLaunchAltitudeRequest, Mavsdk_Rpc_Action_SetReturnToLaunchAltitudeResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.action.ActionService/SetReturnToLaunchAltitude",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Mavsdk_Rpc_Action_ActionServiceClient: Mavsdk_Rpc_Action_ActionServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the mavsdk.rpc.action.ActionService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_Action_ActionServiceProvider: CallHandlerProvider {
  ///
  /// Send command to arm the drone.
  ///
  /// Arming a drone normally causes motors to spin at idle.
  /// Before arming take all safety precautions and stand clear of the drone!
  func arm(request: Mavsdk_Rpc_Action_ArmRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_ArmResponse>
  ///
  /// Send command to disarm the drone.
  ///
  /// This will disarm a drone that considers itself landed. If flying, the drone should
  /// reject the disarm command. Disarming means that all motors will stop.
  func disarm(request: Mavsdk_Rpc_Action_DisarmRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_DisarmResponse>
  ///
  /// Send command to take off and hover.
  ///
  /// This switches the drone into position control mode and commands
  /// it to take off and hover at the takeoff altitude.
  ///
  /// Note that the vehicle must be armed before it can take off.
  func takeoff(request: Mavsdk_Rpc_Action_TakeoffRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_TakeoffResponse>
  ///
  /// Send command to land at the current position.
  ///
  /// This switches the drone to 'Land' flight mode.
  func land(request: Mavsdk_Rpc_Action_LandRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_LandResponse>
  ///
  /// Send command to reboot the drone components.
  ///
  /// This will reboot the autopilot, companion computer, camera and gimbal.
  func reboot(request: Mavsdk_Rpc_Action_RebootRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_RebootResponse>
  ///
  /// Send command to shut down the drone components.
  ///
  /// This will shut down the autopilot, onboard computer, camera and gimbal.
  /// This command should only be used when the autopilot is disarmed and autopilots commonly
  /// reject it if they are not already ready to shut down.
  func shutdown(request: Mavsdk_Rpc_Action_ShutdownRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_ShutdownResponse>
  ///
  /// Send command to kill the drone.
  ///
  /// This will disarm a drone irrespective of whether it is landed or flying.
  /// Note that the drone will fall out of the sky if this command is used while flying.
  func kill(request: Mavsdk_Rpc_Action_KillRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_KillResponse>
  ///
  /// Send command to return to the launch (takeoff) position and land.
  ///
  /// This switches the drone into [Return mode](https://docs.px4.io/master/en/flight_modes/return.html) which
  /// generally means it will rise up to a certain altitude to clear any obstacles before heading
  /// back to the launch (takeoff) position and land there.
  func returnToLaunch(request: Mavsdk_Rpc_Action_ReturnToLaunchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_ReturnToLaunchResponse>
  ///
  /// Send command to move the vehicle to a specific global position.
  ///
  /// The latitude and longitude are given in degrees (WGS84 frame) and the altitude
  /// in meters AMSL (above mean sea level).
  ///
  /// The yaw angle is in degrees (frame is NED, 0 is North, positive is clockwise).
  func gotoLocation(request: Mavsdk_Rpc_Action_GotoLocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_GotoLocationResponse>
  ///
  /// Send command to transition the drone to fixedwing.
  ///
  /// The associated action will only be executed for VTOL vehicles (on other vehicle types the
  /// command will fail). The command will succeed if called when the vehicle
  /// is already in fixedwing mode.
  func transitionToFixedwing(request: Mavsdk_Rpc_Action_TransitionToFixedwingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_TransitionToFixedwingResponse>
  ///
  /// Send command to transition the drone to multicopter.
  ///
  /// The associated action will only be executed for VTOL vehicles (on other vehicle types the
  /// command will fail). The command will succeed if called when the vehicle
  /// is already in multicopter mode.
  func transitionToMulticopter(request: Mavsdk_Rpc_Action_TransitionToMulticopterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_TransitionToMulticopterResponse>
  ///
  /// Get the takeoff altitude (in meters above ground).
  func getTakeoffAltitude(request: Mavsdk_Rpc_Action_GetTakeoffAltitudeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_GetTakeoffAltitudeResponse>
  ///
  /// Set takeoff altitude (in meters above ground).
  func setTakeoffAltitude(request: Mavsdk_Rpc_Action_SetTakeoffAltitudeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_SetTakeoffAltitudeResponse>
  ///
  /// Get the vehicle maximum speed (in metres/second).
  func getMaximumSpeed(request: Mavsdk_Rpc_Action_GetMaximumSpeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_GetMaximumSpeedResponse>
  ///
  /// Set vehicle maximum speed (in metres/second).
  func setMaximumSpeed(request: Mavsdk_Rpc_Action_SetMaximumSpeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_SetMaximumSpeedResponse>
  ///
  /// Get the return to launch minimum return altitude (in meters).
  func getReturnToLaunchAltitude(request: Mavsdk_Rpc_Action_GetReturnToLaunchAltitudeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_GetReturnToLaunchAltitudeResponse>
  ///
  /// Set the return to launch minimum return altitude (in meters).
  func setReturnToLaunchAltitude(request: Mavsdk_Rpc_Action_SetReturnToLaunchAltitudeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_Action_SetReturnToLaunchAltitudeResponse>
}

extension Mavsdk_Rpc_Action_ActionServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.action.ActionService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Arm":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.arm(request: request, context: context)
        }
      }

    case "Disarm":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.disarm(request: request, context: context)
        }
      }

    case "Takeoff":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.takeoff(request: request, context: context)
        }
      }

    case "Land":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.land(request: request, context: context)
        }
      }

    case "Reboot":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.reboot(request: request, context: context)
        }
      }

    case "Shutdown":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.shutdown(request: request, context: context)
        }
      }

    case "Kill":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.kill(request: request, context: context)
        }
      }

    case "ReturnToLaunch":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.returnToLaunch(request: request, context: context)
        }
      }

    case "GotoLocation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.gotoLocation(request: request, context: context)
        }
      }

    case "TransitionToFixedwing":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.transitionToFixedwing(request: request, context: context)
        }
      }

    case "TransitionToMulticopter":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.transitionToMulticopter(request: request, context: context)
        }
      }

    case "GetTakeoffAltitude":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTakeoffAltitude(request: request, context: context)
        }
      }

    case "SetTakeoffAltitude":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setTakeoffAltitude(request: request, context: context)
        }
      }

    case "GetMaximumSpeed":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getMaximumSpeed(request: request, context: context)
        }
      }

    case "SetMaximumSpeed":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setMaximumSpeed(request: request, context: context)
        }
      }

    case "GetReturnToLaunchAltitude":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getReturnToLaunchAltitude(request: request, context: context)
        }
      }

    case "SetReturnToLaunchAltitude":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setReturnToLaunchAltitude(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

