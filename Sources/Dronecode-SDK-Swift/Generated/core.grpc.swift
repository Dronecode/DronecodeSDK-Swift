//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: core.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Core_DiscoverResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Core_DiscoverResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Core_DiscoverResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Core_SubscribeDiscoverRequest, DronecodeSdk_Rpc_Core_DiscoverResponse>, DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverCall {
  override class var method: String { return "/dronecode_sdk.rpc.core.CoreService/SubscribeDiscover" }
}

class DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Core_DiscoverResponse>, DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverCall {
  override class var method: String { return "/dronecode_sdk.rpc.core.CoreService/SubscribeDiscover" }
}

internal protocol DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> DronecodeSdk_Rpc_Core_TimeoutResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<DronecodeSdk_Rpc_Core_TimeoutResponse?>) -> Void) throws
}

internal extension DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> DronecodeSdk_Rpc_Core_TimeoutResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutCallBase: ClientCallServerStreamingBase<DronecodeSdk_Rpc_Core_SubscribeTimeoutRequest, DronecodeSdk_Rpc_Core_TimeoutResponse>, DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutCall {
  override class var method: String { return "/dronecode_sdk.rpc.core.CoreService/SubscribeTimeout" }
}

class DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutCallTestStub: ClientCallServerStreamingTestStub<DronecodeSdk_Rpc_Core_TimeoutResponse>, DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutCall {
  override class var method: String { return "/dronecode_sdk.rpc.core.CoreService/SubscribeTimeout" }
}

internal protocol DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Core_ListRunningPluginsRequest, DronecodeSdk_Rpc_Core_ListRunningPluginsResponse>, DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsCall {
  override class var method: String { return "/dronecode_sdk.rpc.core.CoreService/ListRunningPlugins" }
}


/// Instantiate DronecodeSdk_Rpc_Core_CoreServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol DronecodeSdk_Rpc_Core_CoreServiceService: ServiceClient {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeDiscover(_ request: DronecodeSdk_Rpc_Core_SubscribeDiscoverRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeTimeout(_ request: DronecodeSdk_Rpc_Core_SubscribeTimeoutRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutCall

  /// Synchronous. Unary.
  func listRunningPlugins(_ request: DronecodeSdk_Rpc_Core_ListRunningPluginsRequest) throws -> DronecodeSdk_Rpc_Core_ListRunningPluginsResponse
  /// Asynchronous. Unary.
  func listRunningPlugins(_ request: DronecodeSdk_Rpc_Core_ListRunningPluginsRequest, completion: @escaping (DronecodeSdk_Rpc_Core_ListRunningPluginsResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsCall

}

internal final class DronecodeSdk_Rpc_Core_CoreServiceServiceClient: ServiceClientBase, DronecodeSdk_Rpc_Core_CoreServiceService {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeDiscover(_ request: DronecodeSdk_Rpc_Core_SubscribeDiscoverRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverCall {
    return try DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeTimeout(_ request: DronecodeSdk_Rpc_Core_SubscribeTimeoutRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutCall {
    return try DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listRunningPlugins(_ request: DronecodeSdk_Rpc_Core_ListRunningPluginsRequest) throws -> DronecodeSdk_Rpc_Core_ListRunningPluginsResponse {
    return try DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func listRunningPlugins(_ request: DronecodeSdk_Rpc_Core_ListRunningPluginsRequest, completion: @escaping (DronecodeSdk_Rpc_Core_ListRunningPluginsResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsCall {
    return try DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

class DronecodeSdk_Rpc_Core_CoreServiceServiceTestStub: ServiceClientTestStubBase, DronecodeSdk_Rpc_Core_CoreServiceService {
  var subscribeDiscoverRequests: [DronecodeSdk_Rpc_Core_SubscribeDiscoverRequest] = []
  var subscribeDiscoverCalls: [DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverCall] = []
  func subscribeDiscover(_ request: DronecodeSdk_Rpc_Core_SubscribeDiscoverRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverCall {
    subscribeDiscoverRequests.append(request)
    defer { subscribeDiscoverCalls.removeFirst() }
    return subscribeDiscoverCalls.first!
  }

  var subscribeTimeoutRequests: [DronecodeSdk_Rpc_Core_SubscribeTimeoutRequest] = []
  var subscribeTimeoutCalls: [DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutCall] = []
  func subscribeTimeout(_ request: DronecodeSdk_Rpc_Core_SubscribeTimeoutRequest, completion: ((CallResult) -> Void)?) throws -> DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutCall {
    subscribeTimeoutRequests.append(request)
    defer { subscribeTimeoutCalls.removeFirst() }
    return subscribeTimeoutCalls.first!
  }

  var listRunningPluginsRequests: [DronecodeSdk_Rpc_Core_ListRunningPluginsRequest] = []
  var listRunningPluginsResponses: [DronecodeSdk_Rpc_Core_ListRunningPluginsResponse] = []
  func listRunningPlugins(_ request: DronecodeSdk_Rpc_Core_ListRunningPluginsRequest) throws -> DronecodeSdk_Rpc_Core_ListRunningPluginsResponse {
    listRunningPluginsRequests.append(request)
    defer { listRunningPluginsResponses.removeFirst() }
    return listRunningPluginsResponses.first!
  }
  func listRunningPlugins(_ request: DronecodeSdk_Rpc_Core_ListRunningPluginsRequest, completion: @escaping (DronecodeSdk_Rpc_Core_ListRunningPluginsResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsCall {
    fatalError("not implemented")
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol DronecodeSdk_Rpc_Core_CoreServiceProvider: ServiceProvider {
  func subscribeDiscover(request: DronecodeSdk_Rpc_Core_SubscribeDiscoverRequest, session: DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverSession) throws -> ServerStatus?
  func subscribeTimeout(request: DronecodeSdk_Rpc_Core_SubscribeTimeoutRequest, session: DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutSession) throws -> ServerStatus?
  func listRunningPlugins(request: DronecodeSdk_Rpc_Core_ListRunningPluginsRequest, session: DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsSession) throws -> DronecodeSdk_Rpc_Core_ListRunningPluginsResponse
}

extension DronecodeSdk_Rpc_Core_CoreServiceProvider {
  internal var serviceName: String { return "dronecode_sdk.rpc.core.CoreService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/dronecode_sdk.rpc.core.CoreService/SubscribeDiscover":
      return try DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeDiscover(request: $0, session: $1 as! DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverSessionBase) })
          .run()
    case "/dronecode_sdk.rpc.core.CoreService/SubscribeTimeout":
      return try DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeTimeout(request: $0, session: $1 as! DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutSessionBase) })
          .run()
    case "/dronecode_sdk.rpc.core.CoreService/ListRunningPlugins":
      return try DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsSessionBase(
        handler: handler,
        providerBlock: { try self.listRunningPlugins(request: $0, session: $1 as! DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Core_DiscoverResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Core_DiscoverResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Core_DiscoverResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Core_SubscribeDiscoverRequest, DronecodeSdk_Rpc_Core_DiscoverResponse>, DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverSession {}

class DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Core_DiscoverResponse>, DronecodeSdk_Rpc_Core_CoreServiceSubscribeDiscoverSession {}

internal protocol DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: DronecodeSdk_Rpc_Core_TimeoutResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: DronecodeSdk_Rpc_Core_TimeoutResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: DronecodeSdk_Rpc_Core_TimeoutResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutSessionBase: ServerSessionServerStreamingBase<DronecodeSdk_Rpc_Core_SubscribeTimeoutRequest, DronecodeSdk_Rpc_Core_TimeoutResponse>, DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutSession {}

class DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutSessionTestStub: ServerSessionServerStreamingTestStub<DronecodeSdk_Rpc_Core_TimeoutResponse>, DronecodeSdk_Rpc_Core_CoreServiceSubscribeTimeoutSession {}

internal protocol DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Core_ListRunningPluginsRequest, DronecodeSdk_Rpc_Core_ListRunningPluginsResponse>, DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsSession {}

class DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Core_CoreServiceListRunningPluginsSession {}

