//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: gimbal.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawCall: ClientCallUnary {}

fileprivate final class DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawCallBase: ClientCallUnaryBase<DronecodeSdk_Rpc_Gimbal_SetPitchAndYawRequest, DronecodeSdk_Rpc_Gimbal_SetPitchAndYawResponse>, DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawCall {
  override class var method: String { return "/dronecode_sdk.rpc.gimbal.GimbalService/SetPitchAndYaw" }
}


/// Instantiate DronecodeSdk_Rpc_Gimbal_GimbalServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol DronecodeSdk_Rpc_Gimbal_GimbalServiceService: ServiceClient {
  /// Synchronous. Unary.
  func setPitchAndYaw(_ request: DronecodeSdk_Rpc_Gimbal_SetPitchAndYawRequest) throws -> DronecodeSdk_Rpc_Gimbal_SetPitchAndYawResponse
  /// Asynchronous. Unary.
  func setPitchAndYaw(_ request: DronecodeSdk_Rpc_Gimbal_SetPitchAndYawRequest, completion: @escaping (DronecodeSdk_Rpc_Gimbal_SetPitchAndYawResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawCall

}

internal final class DronecodeSdk_Rpc_Gimbal_GimbalServiceServiceClient: ServiceClientBase, DronecodeSdk_Rpc_Gimbal_GimbalServiceService {
  /// Synchronous. Unary.
  internal func setPitchAndYaw(_ request: DronecodeSdk_Rpc_Gimbal_SetPitchAndYawRequest) throws -> DronecodeSdk_Rpc_Gimbal_SetPitchAndYawResponse {
    return try DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func setPitchAndYaw(_ request: DronecodeSdk_Rpc_Gimbal_SetPitchAndYawRequest, completion: @escaping (DronecodeSdk_Rpc_Gimbal_SetPitchAndYawResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawCall {
    return try DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

class DronecodeSdk_Rpc_Gimbal_GimbalServiceServiceTestStub: ServiceClientTestStubBase, DronecodeSdk_Rpc_Gimbal_GimbalServiceService {
  var setPitchAndYawRequests: [DronecodeSdk_Rpc_Gimbal_SetPitchAndYawRequest] = []
  var setPitchAndYawResponses: [DronecodeSdk_Rpc_Gimbal_SetPitchAndYawResponse] = []
  func setPitchAndYaw(_ request: DronecodeSdk_Rpc_Gimbal_SetPitchAndYawRequest) throws -> DronecodeSdk_Rpc_Gimbal_SetPitchAndYawResponse {
    setPitchAndYawRequests.append(request)
    defer { setPitchAndYawResponses.removeFirst() }
    return setPitchAndYawResponses.first!
  }
  func setPitchAndYaw(_ request: DronecodeSdk_Rpc_Gimbal_SetPitchAndYawRequest, completion: @escaping (DronecodeSdk_Rpc_Gimbal_SetPitchAndYawResponse?, CallResult) -> Void) throws -> DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawCall {
    fatalError("not implemented")
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol DronecodeSdk_Rpc_Gimbal_GimbalServiceProvider: ServiceProvider {
  func setPitchAndYaw(request: DronecodeSdk_Rpc_Gimbal_SetPitchAndYawRequest, session: DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawSession) throws -> DronecodeSdk_Rpc_Gimbal_SetPitchAndYawResponse
}

extension DronecodeSdk_Rpc_Gimbal_GimbalServiceProvider {
  internal var serviceName: String { return "dronecode_sdk.rpc.gimbal.GimbalService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/dronecode_sdk.rpc.gimbal.GimbalService/SetPitchAndYaw":
      return try DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawSessionBase(
        handler: handler,
        providerBlock: { try self.setPitchAndYaw(request: $0, session: $1 as! DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawSession: ServerSessionUnary {}

fileprivate final class DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawSessionBase: ServerSessionUnaryBase<DronecodeSdk_Rpc_Gimbal_SetPitchAndYawRequest, DronecodeSdk_Rpc_Gimbal_SetPitchAndYawResponse>, DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawSession {}

class DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawSessionTestStub: ServerSessionUnaryTestStub, DronecodeSdk_Rpc_Gimbal_GimbalServiceSetPitchAndYawSession {}

