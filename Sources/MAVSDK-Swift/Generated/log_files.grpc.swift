//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: log_files.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Mavsdk_Rpc_LogFiles_LogFilesServiceClient, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_LogFiles_LogFilesServiceClientProtocol: GRPCClient {
  func getEntries(
    _ request: Mavsdk_Rpc_LogFiles_GetEntriesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mavsdk_Rpc_LogFiles_GetEntriesRequest, Mavsdk_Rpc_LogFiles_GetEntriesResponse>

  func subscribeDownloadLogFile(
    _ request: Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest,
    callOptions: CallOptions?,
    handler: @escaping (Mavsdk_Rpc_LogFiles_DownloadLogFileResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest, Mavsdk_Rpc_LogFiles_DownloadLogFileResponse>

}

extension Mavsdk_Rpc_LogFiles_LogFilesServiceClientProtocol {

  /// Get List of log files.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEntries.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getEntries(
    _ request: Mavsdk_Rpc_LogFiles_GetEntriesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mavsdk_Rpc_LogFiles_GetEntriesRequest, Mavsdk_Rpc_LogFiles_GetEntriesResponse> {
    return self.makeUnaryCall(
      path: "/mavsdk.rpc.log_files.LogFilesService/GetEntries",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Download log file.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeDownloadLogFile.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func subscribeDownloadLogFile(
    _ request: Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Mavsdk_Rpc_LogFiles_DownloadLogFileResponse) -> Void
  ) -> ServerStreamingCall<Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest, Mavsdk_Rpc_LogFiles_DownloadLogFileResponse> {
    return self.makeServerStreamingCall(
      path: "/mavsdk.rpc.log_files.LogFilesService/SubscribeDownloadLogFile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }
}

internal final class Mavsdk_Rpc_LogFiles_LogFilesServiceClient: Mavsdk_Rpc_LogFiles_LogFilesServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the mavsdk.rpc.log_files.LogFilesService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Mavsdk_Rpc_LogFiles_LogFilesServiceProvider: CallHandlerProvider {
  /// Get List of log files.
  func getEntries(request: Mavsdk_Rpc_LogFiles_GetEntriesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Mavsdk_Rpc_LogFiles_GetEntriesResponse>
  /// Download log file.
  func subscribeDownloadLogFile(request: Mavsdk_Rpc_LogFiles_SubscribeDownloadLogFileRequest, context: StreamingResponseCallContext<Mavsdk_Rpc_LogFiles_DownloadLogFileResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Mavsdk_Rpc_LogFiles_LogFilesServiceProvider {
  internal var serviceName: Substring { return "mavsdk.rpc.log_files.LogFilesService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetEntries":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getEntries(request: request, context: context)
        }
      }

    case "SubscribeDownloadLogFile":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.subscribeDownloadLogFile(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

